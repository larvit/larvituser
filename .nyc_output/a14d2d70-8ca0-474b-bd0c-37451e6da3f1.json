{"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/userBase.ts":{"path":"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/userBase.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":26}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":38}},"3":{"start":{"line":5,"column":21},"end":{"line":5,"column":47}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":49}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":31}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":33}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":41}},"8":{"start":{"line":12,"column":8},"end":{"line":12,"column":55}},"9":{"start":{"line":13,"column":8},"end":{"line":13,"column":43}},"10":{"start":{"line":23,"column":8},"end":{"line":23,"column":48}},"11":{"start":{"line":33,"column":26},"end":{"line":33,"column":66}},"12":{"start":{"line":34,"column":8},"end":{"line":38,"column":9}},"13":{"start":{"line":35,"column":24},"end":{"line":35,"column":69}},"14":{"start":{"line":36,"column":12},"end":{"line":36,"column":60}},"15":{"start":{"line":37,"column":12},"end":{"line":37,"column":22}},"16":{"start":{"line":39,"column":8},"end":{"line":39,"column":69}},"17":{"start":{"line":40,"column":8},"end":{"line":44,"column":9}},"18":{"start":{"line":41,"column":26},"end":{"line":41,"column":62}},"19":{"start":{"line":42,"column":12},"end":{"line":42,"column":54}},"20":{"start":{"line":43,"column":12},"end":{"line":43,"column":44}},"21":{"start":{"line":54,"column":26},"end":{"line":54,"column":70}},"22":{"start":{"line":55,"column":8},"end":{"line":59,"column":9}},"23":{"start":{"line":56,"column":24},"end":{"line":56,"column":74}},"24":{"start":{"line":57,"column":12},"end":{"line":57,"column":60}},"25":{"start":{"line":58,"column":12},"end":{"line":58,"column":22}},"26":{"start":{"line":60,"column":8},"end":{"line":60,"column":69}},"27":{"start":{"line":62,"column":21},"end":{"line":62,"column":64}},"28":{"start":{"line":65,"column":8},"end":{"line":69,"column":9}},"29":{"start":{"line":70,"column":8},"end":{"line":70,"column":34}},"30":{"start":{"line":73,"column":26},"end":{"line":73,"column":59}},"31":{"start":{"line":74,"column":8},"end":{"line":78,"column":9}},"32":{"start":{"line":75,"column":24},"end":{"line":75,"column":72}},"33":{"start":{"line":76,"column":12},"end":{"line":76,"column":60}},"34":{"start":{"line":77,"column":12},"end":{"line":77,"column":22}},"35":{"start":{"line":79,"column":8},"end":{"line":79,"column":50}},"36":{"start":{"line":80,"column":8},"end":{"line":80,"column":27}},"37":{"start":{"line":81,"column":8},"end":{"line":81,"column":25}},"38":{"start":{"line":90,"column":26},"end":{"line":90,"column":64}},"39":{"start":{"line":91,"column":8},"end":{"line":95,"column":9}},"40":{"start":{"line":92,"column":24},"end":{"line":92,"column":72}},"41":{"start":{"line":93,"column":12},"end":{"line":93,"column":60}},"42":{"start":{"line":94,"column":12},"end":{"line":94,"column":22}},"43":{"start":{"line":96,"column":8},"end":{"line":96,"column":61}},"44":{"start":{"line":97,"column":8},"end":{"line":97,"column":33}},"45":{"start":{"line":100,"column":26},"end":{"line":100,"column":68}},"46":{"start":{"line":101,"column":8},"end":{"line":105,"column":9}},"47":{"start":{"line":102,"column":24},"end":{"line":102,"column":72}},"48":{"start":{"line":103,"column":12},"end":{"line":103,"column":60}},"49":{"start":{"line":104,"column":12},"end":{"line":104,"column":22}},"50":{"start":{"line":106,"column":8},"end":{"line":106,"column":68}},"51":{"start":{"line":109,"column":26},"end":{"line":109,"column":68}},"52":{"start":{"line":110,"column":8},"end":{"line":114,"column":9}},"53":{"start":{"line":111,"column":24},"end":{"line":111,"column":72}},"54":{"start":{"line":112,"column":12},"end":{"line":112,"column":60}},"55":{"start":{"line":113,"column":12},"end":{"line":113,"column":22}},"56":{"start":{"line":115,"column":8},"end":{"line":115,"column":68}},"57":{"start":{"line":116,"column":8},"end":{"line":116,"column":36}},"58":{"start":{"line":119,"column":0},"end":{"line":119,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":25},"end":{"line":14,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":32},"end":{"line":24,"column":5}},"line":22},"2":{"name":"(anonymous_2)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":28},"end":{"line":45,"column":5}},"line":31},"3":{"name":"(anonymous_3)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":32},"end":{"line":71,"column":5}},"line":53},"4":{"name":"(anonymous_4)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":15},"end":{"line":82,"column":5}},"line":72},"5":{"name":"(anonymous_5)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":24},"end":{"line":98,"column":5}},"line":89},"6":{"name":"(anonymous_6)","decl":{"start":{"line":99,"column":4},"end":{"line":99,"column":5}},"loc":{"start":{"line":99,"column":35},"end":{"line":107,"column":5}},"line":99},"7":{"name":"(anonymous_7)","decl":{"start":{"line":108,"column":4},"end":{"line":108,"column":5}},"loc":{"start":{"line":108,"column":35},"end":{"line":117,"column":5}},"line":108}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":22},"end":{"line":13,"column":42}},"type":"binary-expr","locations":[{"start":{"line":13,"column":22},"end":{"line":13,"column":36}},{"start":{"line":13,"column":40},"end":{"line":13,"column":42}}],"line":13},"1":{"loc":{"start":{"line":34,"column":8},"end":{"line":38,"column":9}},"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":38,"column":9}},{"start":{"line":34,"column":8},"end":{"line":38,"column":9}}],"line":34},"2":{"loc":{"start":{"line":42,"column":12},"end":{"line":42,"column":53}},"type":"binary-expr","locations":[{"start":{"line":42,"column":12},"end":{"line":42,"column":35}},{"start":{"line":42,"column":40},"end":{"line":42,"column":52}}],"line":42},"3":{"loc":{"start":{"line":55,"column":8},"end":{"line":59,"column":9}},"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":59,"column":9}},{"start":{"line":55,"column":8},"end":{"line":59,"column":9}}],"line":55},"4":{"loc":{"start":{"line":65,"column":8},"end":{"line":69,"column":9}},"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":69,"column":9}}],"line":65},"5":{"loc":{"start":{"line":74,"column":8},"end":{"line":78,"column":9}},"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":78,"column":9}},{"start":{"line":74,"column":8},"end":{"line":78,"column":9}}],"line":74},"6":{"loc":{"start":{"line":91,"column":8},"end":{"line":95,"column":9}},"type":"if","locations":[{"start":{"line":91,"column":8},"end":{"line":95,"column":9}},{"start":{"line":91,"column":8},"end":{"line":95,"column":9}}],"line":91},"7":{"loc":{"start":{"line":101,"column":8},"end":{"line":105,"column":9}},"type":"if","locations":[{"start":{"line":101,"column":8},"end":{"line":105,"column":9}},{"start":{"line":101,"column":8},"end":{"line":105,"column":9}}],"line":101},"8":{"loc":{"start":{"line":110,"column":8},"end":{"line":114,"column":9}},"type":"if","locations":[{"start":{"line":110,"column":8},"end":{"line":114,"column":9}},{"start":{"line":110,"column":8},"end":{"line":114,"column":9}}],"line":110}},"s":{"0":1,"1":1,"2":1,"3":1,"4":104,"5":104,"6":104,"7":104,"8":104,"9":104,"10":4,"11":4,"12":4,"13":1,"14":1,"15":1,"16":3,"17":3,"18":3,"19":3,"20":3,"21":4,"22":4,"23":1,"24":1,"25":1,"26":3,"27":3,"28":3,"29":3,"30":2,"31":2,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":2,"39":2,"40":1,"41":1,"42":1,"43":1,"44":1,"45":2,"46":2,"47":1,"48":1,"49":1,"50":1,"51":4,"52":4,"53":1,"54":1,"55":1,"56":3,"57":1,"58":1},"f":{"0":104,"1":4,"2":4,"3":4,"4":2,"5":2,"6":2,"7":4},"b":{"0":[104,1],"1":[1,3],"2":[3,3],"3":[1,3],"4":[3],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,3]},"inputSourceMap":{"version":3,"file":"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/userBase.ts","sources":["/home/snorr/Documents/code/jaggu/nbs/larvituser/src/userBase.ts"],"names":[],"mappings":"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","sourcesContent":["import { LogInstance } from 'larvitutils';\nimport { UserLib } from './index';\nimport { arrayify } from './helpers';\n\nconst topLogPrefix = 'larvituser: userBase.ts:';\n\nexport type UserBaseOptions = {\n\tuserInstance: UserLib,\n\tlog: LogInstance,\n\tuuid: string,\n\tusername: string,\n\tpasswordIsFalse: boolean,\n\tfields?: Record<string, string[]>,\n};\n\nexport class UserBase {\n\tprivate userInstance: UserLib;\n\tprivate log: LogInstance;\n\tpublic uuid: string;\n\tpublic username: string;\n\tpublic passwordIsFalse: boolean;\n\tpublic fields: Record<string, string[]>;\n\n\tconstructor(options: UserBaseOptions) {\n\t\tthis.userInstance = options.userInstance;\n\t\tthis.log = options.log;\n\n\t\tthis.uuid = options.uuid;\n\t\tthis.username = options.username;\n\t\tthis.passwordIsFalse = options.passwordIsFalse;\n\t\tthis.fields = options.fields ?? {};\n\t}\n\n\t/**\n\t * Add a field with value\n\t *\n\t * @param {string} name -\n\t * @param {string} value -\n\t * @returns {Promise<void>} -\n\t */\n\tasync addField(name: string, value: string | string[]): Promise<void> {\n\t\tawait this.addFields({ [name]: value });\n\t}\n\n\t/**\n\t * Adds one or more fields with values to the user object. Does not overwrite existing values. It is possible to add the same value multiple times\n\t *\n\t * @param {object} fields - field name as key, field values as array to that key - ex: {'role': ['admin','user']}\n\t * @returns {Promise<void>} -\n\t */\n\tasync addFields(fields: Record<string, string | string[]>): Promise<void> {\n\t\tconst logPrefix = `${topLogPrefix} UserBase.addFields() -`;\n\n\t\tif (!this.uuid) {\n\t\t\tconst err = new Error('Cannot add field; no user loaded');\n\t\t\tthis.log.verbose(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\tawait this.userInstance.addUserDataFields(this.uuid, fields);\n\n\t\tfor (const key in fields) {\n\t\t\tconst value = arrayify(fields[key]);\n\t\t\tthis.fields[key] ??= [];\n\t\t\tthis.fields[key].push(...value);\n\t\t}\n\t}\n\n\t/**\n\t * Replace all fields\n\t * IMPORTANT!!! Will clear all data not given in the fields parameter\n\t *\n\t * @param {object} fields - field name as key, field values as array to that key - ex: {'role': ['admin','user']}\n\t * @returns {Promise<void>} -\n\t */\n\tasync replaceFields(fields: Record<string, string | string[]>): Promise<void> {\n\t\tconst logPrefix = `${topLogPrefix} UserBase.replaceFields() -`;\n\n\t\tif (!this.uuid) {\n\t\t\tconst err = new Error('Cannot replace fields; no user loaded');\n\t\t\tthis.log.verbose(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\tawait this.userInstance.replaceUserFields(this.uuid, fields);\n\n\t\t// Reload everything\n\t\tconst user = await this.userInstance.fromUuid(this.uuid);\n\n\t\t// Non-trivial to test\n\t\t/* istanbul ignore if */\n\t\tif (typeof user === 'boolean') {\n\t\t\tconst err = new Error(`Failed to load user after replacing fields, userUuid: ${this.uuid}`);\n\t\t\tthis.log.verbose(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\tthis.fields = user.fields;\n\t}\n\n\tasync rm(): Promise<void> {\n\t\tconst logPrefix = `${topLogPrefix} UserBase.rm() -`;\n\n\t\tif (!this.uuid) {\n\t\t\tconst err = new Error('Cannot remove field; no user loaded');\n\t\t\tthis.log.verbose(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\tawait this.userInstance.rmUser(this.uuid);\n\n\t\tthis.username = '';\n\t\tthis.fields = {};\n\t}\n\n\t/**\n\t * Remove a field from this user\n\t *\n\t * @param {string} name -\n\t * @returns {Promise<void>} -\n\t */\n\tasync rmField(name: string): Promise<void> {\n\t\tconst logPrefix = `${topLogPrefix} UserBase.rmField() -`;\n\n\t\tif (!this.uuid) {\n\t\t\tconst err = new Error('Cannot remove field; no user loaded');\n\t\t\tthis.log.verbose(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\tawait this.userInstance.rmUserField(this.uuid, name);\n\n\t\tdelete this.fields[name];\n\t}\n\n\tasync setPassword(newPassword: string): Promise<void> {\n\t\tconst logPrefix = `${topLogPrefix} UserBase.setPassword() -`;\n\n\t\tif (!this.uuid) {\n\t\t\tconst err = new Error('Cannot set password; no user loaded');\n\t\t\tthis.log.verbose(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\tawait this.userInstance.setPassword(this.uuid, newPassword);\n\t}\n\n\tasync setUsername(newUsername: string): Promise<void> {\n\t\tconst logPrefix = `${topLogPrefix} UserBase.setUsername() -`;\n\n\t\tif (!this.uuid) {\n\t\t\tconst err = new Error('Cannot set username; no user loaded');\n\t\t\tthis.log.verbose(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\tawait this.userInstance.setUsername(this.uuid, newUsername);\n\t\tthis.username = newUsername;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"379128a97d750b1ebcd77b33ec93cbd929c00e07","contentHash":"8b4cec26efed725055d179da340ac788624255b23558c6879853002d92e6b42c"},"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/helpers.ts":{"path":"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/helpers.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":22},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":21},"end":{"line":5,"column":47}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":50}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":28}},"6":{"start":{"line":12,"column":8},"end":{"line":13,"column":60}},"7":{"start":{"line":13,"column":12},"end":{"line":13,"column":60}},"8":{"start":{"line":14,"column":8},"end":{"line":15,"column":68}},"9":{"start":{"line":15,"column":12},"end":{"line":15,"column":68}},"10":{"start":{"line":16,"column":8},"end":{"line":16,"column":67}},"11":{"start":{"line":17,"column":8},"end":{"line":17,"column":45}},"12":{"start":{"line":18,"column":8},"end":{"line":18,"column":29}},"13":{"start":{"line":19,"column":8},"end":{"line":19,"column":31}},"14":{"start":{"line":20,"column":8},"end":{"line":20,"column":68}},"15":{"start":{"line":23,"column":8},"end":{"line":27,"column":9}},"16":{"start":{"line":24,"column":24},"end":{"line":24,"column":41}},"17":{"start":{"line":25,"column":12},"end":{"line":25,"column":57}},"18":{"start":{"line":26,"column":12},"end":{"line":26,"column":22}},"19":{"start":{"line":29,"column":8},"end":{"line":29,"column":21}},"20":{"start":{"line":32,"column":26},"end":{"line":32,"column":60}},"21":{"start":{"line":33,"column":20},"end":{"line":33,"column":70}},"22":{"start":{"line":34,"column":32},"end":{"line":34,"column":62}},"23":{"start":{"line":35,"column":8},"end":{"line":39,"column":9}},"24":{"start":{"line":36,"column":24},"end":{"line":36,"column":55}},"25":{"start":{"line":37,"column":12},"end":{"line":37,"column":60}},"26":{"start":{"line":38,"column":12},"end":{"line":38,"column":22}},"27":{"start":{"line":40,"column":25},"end":{"line":40,"column":68}},"28":{"start":{"line":41,"column":8},"end":{"line":42,"column":25}},"29":{"start":{"line":42,"column":12},"end":{"line":42,"column":25}},"30":{"start":{"line":43,"column":8},"end":{"line":43,"column":28}},"31":{"start":{"line":46,"column":25},"end":{"line":46,"column":27}},"32":{"start":{"line":47,"column":20},"end":{"line":47,"column":70}},"33":{"start":{"line":48,"column":8},"end":{"line":48,"column":37}},"34":{"start":{"line":49,"column":8},"end":{"line":49,"column":33}},"35":{"start":{"line":50,"column":25},"end":{"line":50,"column":59}},"36":{"start":{"line":51,"column":8},"end":{"line":54,"column":9}},"37":{"start":{"line":52,"column":12},"end":{"line":52,"column":58}},"38":{"start":{"line":53,"column":12},"end":{"line":53,"column":54}},"39":{"start":{"line":55,"column":8},"end":{"line":55,"column":52}},"40":{"start":{"line":58,"column":0},"end":{"line":58,"column":26}}},"fnMap":{"0":{"name":"arrayify","decl":{"start":{"line":6,"column":9},"end":{"line":6,"column":17}},"loc":{"start":{"line":6,"column":25},"end":{"line":8,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":25},"end":{"line":21,"column":5}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":43},"end":{"line":30,"column":5}},"line":22},"3":{"name":"(anonymous_3)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":29},"end":{"line":44,"column":5}},"line":31},"4":{"name":"(anonymous_4)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":34},"end":{"line":56,"column":5}},"line":45}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":11},"end":{"line":7,"column":49}},"type":"cond-expr","locations":[{"start":{"line":7,"column":34},"end":{"line":7,"column":39}},{"start":{"line":7,"column":42},"end":{"line":7,"column":49}}],"line":7},"1":{"loc":{"start":{"line":12,"column":8},"end":{"line":13,"column":60}},"type":"if","locations":[{"start":{"line":12,"column":8},"end":{"line":13,"column":60}},{"start":{"line":12,"column":8},"end":{"line":13,"column":60}}],"line":12},"2":{"loc":{"start":{"line":14,"column":8},"end":{"line":15,"column":68}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":15,"column":68}},{"start":{"line":14,"column":8},"end":{"line":15,"column":68}}],"line":14},"3":{"loc":{"start":{"line":16,"column":22},"end":{"line":16,"column":66}},"type":"binary-expr","locations":[{"start":{"line":16,"column":22},"end":{"line":16,"column":33}},{"start":{"line":16,"column":37},"end":{"line":16,"column":66}}],"line":16},"4":{"loc":{"start":{"line":23,"column":8},"end":{"line":27,"column":9}},"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":27,"column":9}},{"start":{"line":23,"column":8},"end":{"line":27,"column":9}}],"line":23},"5":{"loc":{"start":{"line":23,"column":12},"end":{"line":23,"column":68}},"type":"binary-expr","locations":[{"start":{"line":23,"column":12},"end":{"line":23,"column":27}},{"start":{"line":23,"column":31},"end":{"line":23,"column":50}},{"start":{"line":23,"column":54},"end":{"line":23,"column":68}}],"line":23},"6":{"loc":{"start":{"line":35,"column":8},"end":{"line":39,"column":9}},"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":39,"column":9}},{"start":{"line":35,"column":8},"end":{"line":39,"column":9}}],"line":35},"7":{"loc":{"start":{"line":41,"column":8},"end":{"line":42,"column":25}},"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":42,"column":25}},{"start":{"line":41,"column":8},"end":{"line":42,"column":25}}],"line":41},"8":{"loc":{"start":{"line":51,"column":8},"end":{"line":54,"column":9}},"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":54,"column":9}},{"start":{"line":51,"column":8},"end":{"line":54,"column":9}}],"line":51}},"s":{"0":1,"1":1,"2":1,"3":1,"4":113,"5":1,"6":2,"7":0,"8":2,"9":0,"10":2,"11":2,"12":2,"13":2,"14":2,"15":524,"16":3,"17":3,"18":3,"19":521,"20":3,"21":3,"22":3,"23":3,"24":1,"25":1,"26":1,"27":2,"28":2,"29":1,"30":1,"31":262,"32":262,"33":262,"34":262,"35":262,"36":262,"37":61,"38":61,"39":201,"40":1},"f":{"0":113,"1":2,"2":524,"3":3,"4":262},"b":{"0":[15,98],"1":[0,2],"2":[0,2],"3":[2,0],"4":[3,521],"5":[524,523,522],"6":[1,2],"7":[1,1],"8":[61,201]},"inputSourceMap":{"version":3,"file":"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/helpers.ts","sources":["/home/snorr/Documents/code/jaggu/nbs/larvituser/src/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { Utils, Log, LogInstance } from 'larvitutils';\nimport { DataWriter } from './dataWriter';\n\nconst topLogPrefix = 'larvituser: helpers.ts -';\n\nexport type HelpersOptions = {\n\tdataWriter: DataWriter,\n\tdb: any,\n\tlog: LogInstance,\n}\n\nexport function arrayify<T>(value: T | Array<T>): Array<T> {\n\treturn Array.isArray(value) ? value : [value];\n}\n\nexport class Helpers {\n\tprivate dataWriter: DataWriter;\n\tprivate db: any;\n\tprivate log: LogInstance;\n\tprivate lUtils: Utils;\n\n\tconstructor(options: HelpersOptions) {\n\t\tif (!options.db) throw new Error('Required option \"db\" not set');\n\t\tif (!options.dataWriter) throw new Error('Required option \"dataWriter\" not set');\n\n\t\toptions.log = options.log ?? new Log('info');\n\n\t\tthis.dataWriter = options.dataWriter;\n\t\tthis.db = options.db;\n\t\tthis.log = options.log;\n\n\t\tthis.lUtils = new Utils({ log: options.log });\n\n\t}\n\n\tvalueOrThrow<T>(value: T | boolean, logPrefix: string, errMsg: string): T {\n\t\tif (value === false || value === undefined || value === null) {\n\t\t\tconst err = new Error(errMsg);\n\t\t\tthis.log.warn(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\t// value should never be set to true, therefore this is safe\n\t\treturn value as T;\n\t}\n\n\tasync getFieldName(uuid: string): Promise<string | boolean> {\n\t\tconst logPrefix = `${topLogPrefix} getFieldName() -`;\n\t\tconst sql = 'SELECT name FROM user_data_fields WHERE uuid = ?';\n\n\t\tconst fieldUuidBuffer = this.lUtils.uuidToBuffer(uuid);\n\t\tif (!fieldUuidBuffer) {\n\t\t\tconst err = new Error('Invalid field uuid');\n\t\t\tthis.log.verbose(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\tconst { rows } = await this.db.query(sql, [fieldUuidBuffer]);\n\n\t\tif (!rows.length) return false;\n\n\t\treturn rows[0].name;\n\t}\n\n\tasync getFieldUuid(fieldName: string): Promise<string | boolean> {\n\t\tconst dbFields = [];\n\t\tconst sql = 'SELECT uuid FROM user_data_fields WHERE name = ?';\n\n\t\tfieldName = fieldName.trim();\n\t\tdbFields.push(fieldName);\n\n\t\tconst { rows } = await this.db.query(sql, dbFields);\n\n\t\tif (!rows.length) {\n\t\t\tawait this.dataWriter.addUserField(fieldName);\n\n\t\t\treturn await this.getFieldUuid(fieldName);\n\t\t}\n\n\t\treturn this.lUtils.formatUuid(rows[0].uuid);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7b82cc3fc9ac416b4d1ac67378c69b317b6ef83c","contentHash":"b3fe82e6f9235a74b188e122990519e7381ba146c5dea455dc4283413877cf9a"},"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/index.ts":{"path":"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/index.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":89}},"4":{"start":{"line":4,"column":71},"end":{"line":4,"column":83}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"6":{"start":{"line":6,"column":26},"end":{"line":6,"column":33}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":17}},"8":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":72}},"10":{"start":{"line":12,"column":4},"end":{"line":12,"column":21}},"11":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"12":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"13":{"start":{"line":15,"column":31},"end":{"line":15,"column":42}},"14":{"start":{"line":16,"column":17},"end":{"line":16,"column":19}},"15":{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},"16":{"start":{"line":17,"column":21},"end":{"line":17,"column":141}},"17":{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},"18":{"start":{"line":17,"column":109},"end":{"line":17,"column":141}},"19":{"start":{"line":18,"column":4},"end":{"line":18,"column":36}},"20":{"start":{"line":19,"column":4},"end":{"line":19,"column":18}},"21":{"start":{"line":21,"column":22},"end":{"line":23,"column":1}},"22":{"start":{"line":22,"column":4},"end":{"line":22,"column":62}},"23":{"start":{"line":24,"column":0},"end":{"line":24,"column":62}},"24":{"start":{"line":25,"column":0},"end":{"line":25,"column":60}},"25":{"start":{"line":26,"column":21},"end":{"line":26,"column":44}},"26":{"start":{"line":27,"column":18},"end":{"line":27,"column":38}},"27":{"start":{"line":28,"column":22},"end":{"line":28,"column":44}},"28":{"start":{"line":29,"column":19},"end":{"line":29,"column":40}},"29":{"start":{"line":30,"column":16},"end":{"line":30,"column":34}},"30":{"start":{"line":31,"column":16},"end":{"line":31,"column":45}},"31":{"start":{"line":32,"column":19},"end":{"line":32,"column":55}},"32":{"start":{"line":33,"column":21},"end":{"line":33,"column":44}},"33":{"start":{"line":34,"column":14},"end":{"line":34,"column":32}},"34":{"start":{"line":35,"column":0},"end":{"line":35,"column":106}},"35":{"start":{"line":35,"column":79},"end":{"line":35,"column":100}},"36":{"start":{"line":36,"column":17},"end":{"line":36,"column":38}},"37":{"start":{"line":37,"column":0},"end":{"line":37,"column":115}},"38":{"start":{"line":37,"column":82},"end":{"line":37,"column":109}},"39":{"start":{"line":40,"column":8},"end":{"line":41,"column":61}},"40":{"start":{"line":41,"column":12},"end":{"line":41,"column":61}},"41":{"start":{"line":42,"column":8},"end":{"line":42,"column":58}},"42":{"start":{"line":43,"column":8},"end":{"line":43,"column":31}},"43":{"start":{"line":44,"column":8},"end":{"line":44,"column":65}},"44":{"start":{"line":45,"column":8},"end":{"line":48,"column":11}},"45":{"start":{"line":49,"column":8},"end":{"line":53,"column":11}},"46":{"start":{"line":56,"column":8},"end":{"line":56,"column":58}},"47":{"start":{"line":67,"column":23},"end":{"line":69,"column":9}},"48":{"start":{"line":70,"column":8},"end":{"line":70,"column":55}},"49":{"start":{"line":80,"column":8},"end":{"line":80,"column":66}},"50":{"start":{"line":89,"column":8},"end":{"line":89,"column":35}},"51":{"start":{"line":90,"column":8},"end":{"line":90,"column":64}},"52":{"start":{"line":102,"column":26},"end":{"line":102,"column":54}},"53":{"start":{"line":103,"column":8},"end":{"line":103,"column":40}},"54":{"start":{"line":104,"column":8},"end":{"line":104,"column":38}},"55":{"start":{"line":105,"column":8},"end":{"line":105,"column":35}},"56":{"start":{"line":106,"column":8},"end":{"line":106,"column":36}},"57":{"start":{"line":107,"column":8},"end":{"line":111,"column":9}},"58":{"start":{"line":108,"column":24},"end":{"line":108,"column":78}},"59":{"start":{"line":109,"column":12},"end":{"line":109,"column":57}},"60":{"start":{"line":110,"column":12},"end":{"line":110,"column":22}},"61":{"start":{"line":113,"column":28},"end":{"line":113,"column":66}},"62":{"start":{"line":114,"column":8},"end":{"line":121,"column":9}},"63":{"start":{"line":115,"column":12},"end":{"line":115,"column":77}},"64":{"start":{"line":118,"column":24},"end":{"line":118,"column":98}},"65":{"start":{"line":119,"column":12},"end":{"line":119,"column":57}},"66":{"start":{"line":120,"column":12},"end":{"line":120,"column":22}},"67":{"start":{"line":123,"column":29},"end":{"line":123,"column":31}},"68":{"start":{"line":124,"column":8},"end":{"line":131,"column":9}},"69":{"start":{"line":125,"column":12},"end":{"line":125,"column":110}},"70":{"start":{"line":126,"column":12},"end":{"line":126,"column":32}},"71":{"start":{"line":129,"column":12},"end":{"line":129,"column":63}},"72":{"start":{"line":130,"column":12},"end":{"line":130,"column":84}},"73":{"start":{"line":134,"column":8},"end":{"line":136,"column":9}},"74":{"start":{"line":135,"column":12},"end":{"line":135,"column":55}},"75":{"start":{"line":138,"column":8},"end":{"line":143,"column":11}},"76":{"start":{"line":145,"column":21},"end":{"line":145,"column":46}},"77":{"start":{"line":148,"column":8},"end":{"line":152,"column":9}},"78":{"start":{"line":153,"column":8},"end":{"line":153,"column":20}},"79":{"start":{"line":162,"column":8},"end":{"line":162,"column":35}},"80":{"start":{"line":163,"column":25},"end":{"line":163,"column":114}},"81":{"start":{"line":164,"column":8},"end":{"line":164,"column":33}},"82":{"start":{"line":175,"column":21},"end":{"line":175,"column":71}},"83":{"start":{"line":176,"column":8},"end":{"line":176,"column":20}},"84":{"start":{"line":186,"column":25},"end":{"line":186,"column":27}},"85":{"start":{"line":187,"column":18},"end":{"line":187,"column":66}},"86":{"start":{"line":188,"column":8},"end":{"line":192,"column":9}},"87":{"start":{"line":189,"column":12},"end":{"line":189,"column":157}},"88":{"start":{"line":190,"column":12},"end":{"line":190,"column":52}},"89":{"start":{"line":191,"column":12},"end":{"line":191,"column":44}},"90":{"start":{"line":193,"column":8},"end":{"line":193,"column":25}},"91":{"start":{"line":194,"column":25},"end":{"line":194,"column":67}},"92":{"start":{"line":195,"column":8},"end":{"line":196,"column":25}},"93":{"start":{"line":196,"column":12},"end":{"line":196,"column":25}},"94":{"start":{"line":197,"column":25},"end":{"line":197,"column":61}},"95":{"start":{"line":198,"column":8},"end":{"line":199,"column":25}},"96":{"start":{"line":199,"column":12},"end":{"line":199,"column":25}},"97":{"start":{"line":200,"column":21},"end":{"line":200,"column":50}},"98":{"start":{"line":201,"column":8},"end":{"line":201,"column":20}},"99":{"start":{"line":211,"column":8},"end":{"line":212,"column":57}},"100":{"start":{"line":212,"column":12},"end":{"line":212,"column":57}},"101":{"start":{"line":213,"column":8},"end":{"line":214,"column":57}},"102":{"start":{"line":214,"column":12},"end":{"line":214,"column":57}},"103":{"start":{"line":215,"column":8},"end":{"line":215,"column":35}},"104":{"start":{"line":216,"column":8},"end":{"line":217,"column":39}},"105":{"start":{"line":217,"column":12},"end":{"line":217,"column":39}},"106":{"start":{"line":218,"column":25},"end":{"line":218,"column":35}},"107":{"start":{"line":219,"column":20},"end":{"line":219,"column":78}},"108":{"start":{"line":220,"column":25},"end":{"line":220,"column":67}},"109":{"start":{"line":221,"column":8},"end":{"line":222,"column":25}},"110":{"start":{"line":222,"column":12},"end":{"line":222,"column":25}},"111":{"start":{"line":223,"column":31},"end":{"line":223,"column":47}},"112":{"start":{"line":224,"column":31},"end":{"line":224,"column":43}},"113":{"start":{"line":225,"column":8},"end":{"line":226,"column":25}},"114":{"start":{"line":226,"column":12},"end":{"line":226,"column":25}},"115":{"start":{"line":227,"column":34},"end":{"line":227,"column":84}},"116":{"start":{"line":228,"column":8},"end":{"line":229,"column":25}},"117":{"start":{"line":229,"column":12},"end":{"line":229,"column":25}},"118":{"start":{"line":230,"column":25},"end":{"line":230,"column":63}},"119":{"start":{"line":231,"column":8},"end":{"line":232,"column":25}},"120":{"start":{"line":232,"column":12},"end":{"line":232,"column":25}},"121":{"start":{"line":233,"column":21},"end":{"line":233,"column":50}},"122":{"start":{"line":234,"column":8},"end":{"line":234,"column":20}},"123":{"start":{"line":243,"column":26},"end":{"line":243,"column":59}},"124":{"start":{"line":244,"column":25},"end":{"line":244,"column":27}},"125":{"start":{"line":245,"column":20},"end":{"line":245,"column":68}},"126":{"start":{"line":246,"column":8},"end":{"line":246,"column":35}},"127":{"start":{"line":247,"column":8},"end":{"line":247,"column":32}},"128":{"start":{"line":248,"column":25},"end":{"line":248,"column":67}},"129":{"start":{"line":249,"column":8},"end":{"line":252,"column":9}},"130":{"start":{"line":250,"column":12},"end":{"line":250,"column":84}},"131":{"start":{"line":251,"column":12},"end":{"line":251,"column":25}},"132":{"start":{"line":253,"column":25},"end":{"line":253,"column":61}},"133":{"start":{"line":254,"column":8},"end":{"line":255,"column":25}},"134":{"start":{"line":255,"column":12},"end":{"line":255,"column":25}},"135":{"start":{"line":256,"column":21},"end":{"line":256,"column":50}},"136":{"start":{"line":257,"column":8},"end":{"line":257,"column":20}},"137":{"start":{"line":267,"column":36},"end":{"line":267,"column":40}},"138":{"start":{"line":268,"column":23},"end":{"line":268,"column":35}},"139":{"start":{"line":269,"column":24},"end":{"line":269,"column":28}},"140":{"start":{"line":270,"column":26},"end":{"line":270,"column":56}},"141":{"start":{"line":271,"column":20},"end":{"line":282,"column":30}},"142":{"start":{"line":283,"column":28},"end":{"line":283,"column":110}},"143":{"start":{"line":284,"column":25},"end":{"line":284,"column":38}},"144":{"start":{"line":285,"column":25},"end":{"line":285,"column":54}},"145":{"start":{"line":286,"column":8},"end":{"line":290,"column":9}},"146":{"start":{"line":287,"column":24},"end":{"line":287,"column":78}},"147":{"start":{"line":288,"column":12},"end":{"line":288,"column":47}},"148":{"start":{"line":289,"column":12},"end":{"line":289,"column":25}},"149":{"start":{"line":291,"column":23},"end":{"line":291,"column":25}},"150":{"start":{"line":292,"column":8},"end":{"line":297,"column":9}},"151":{"start":{"line":293,"column":12},"end":{"line":296,"column":13}},"152":{"start":{"line":294,"column":16},"end":{"line":294,"column":64}},"153":{"start":{"line":295,"column":16},"end":{"line":295,"column":58}},"154":{"start":{"line":298,"column":32},"end":{"line":305,"column":9}},"155":{"start":{"line":306,"column":8},"end":{"line":306,"column":56}},"156":{"start":{"line":316,"column":36},"end":{"line":316,"column":40}},"157":{"start":{"line":317,"column":26},"end":{"line":317,"column":60}},"158":{"start":{"line":318,"column":31},"end":{"line":318,"column":114}},"159":{"start":{"line":319,"column":26},"end":{"line":319,"column":63}},"160":{"start":{"line":320,"column":32},"end":{"line":320,"column":117}},"161":{"start":{"line":321,"column":25},"end":{"line":321,"column":58}},"162":{"start":{"line":322,"column":20},"end":{"line":322,"column":91}},"163":{"start":{"line":323,"column":25},"end":{"line":323,"column":67}},"164":{"start":{"line":324,"column":21},"end":{"line":324,"column":23}},"165":{"start":{"line":325,"column":8},"end":{"line":327,"column":9}},"166":{"start":{"line":326,"column":12},"end":{"line":326,"column":32}},"167":{"start":{"line":328,"column":8},"end":{"line":328,"column":20}},"168":{"start":{"line":337,"column":8},"end":{"line":337,"column":42}},"169":{"start":{"line":338,"column":21},"end":{"line":338,"column":64}},"170":{"start":{"line":339,"column":8},"end":{"line":339,"column":20}},"171":{"start":{"line":350,"column":8},"end":{"line":350,"column":62}},"172":{"start":{"line":359,"column":8},"end":{"line":359,"column":47}},"173":{"start":{"line":369,"column":8},"end":{"line":369,"column":63}},"174":{"start":{"line":379,"column":31},"end":{"line":381,"column":16}},"175":{"start":{"line":382,"column":8},"end":{"line":382,"column":68}},"176":{"start":{"line":392,"column":36},"end":{"line":392,"column":40}},"177":{"start":{"line":393,"column":26},"end":{"line":393,"column":59}},"178":{"start":{"line":394,"column":8},"end":{"line":394,"column":41}},"179":{"start":{"line":395,"column":8},"end":{"line":399,"column":9}},"180":{"start":{"line":396,"column":24},"end":{"line":396,"column":61}},"181":{"start":{"line":397,"column":12},"end":{"line":397,"column":51}},"182":{"start":{"line":398,"column":12},"end":{"line":398,"column":22}},"183":{"start":{"line":400,"column":28},"end":{"line":400,"column":111}},"184":{"start":{"line":401,"column":25},"end":{"line":401,"column":144}},"185":{"start":{"line":402,"column":8},"end":{"line":405,"column":9}},"186":{"start":{"line":403,"column":24},"end":{"line":403,"column":62}},"187":{"start":{"line":404,"column":12},"end":{"line":404,"column":22}},"188":{"start":{"line":406,"column":8},"end":{"line":406,"column":65}},"189":{"start":{"line":409,"column":22},"end":{"line":413,"column":10}},"190":{"start":{"line":414,"column":8},"end":{"line":414,"column":33}},"191":{"start":{"line":417,"column":0},"end":{"line":417,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":5,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":58},"end":{"line":4,"column":59}},"loc":{"start":{"line":4,"column":69},"end":{"line":4,"column":85}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":5,"column":6},"end":{"line":5,"column":7}},"loc":{"start":{"line":5,"column":28},"end":{"line":8,"column":1}},"line":5},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":80},"end":{"line":9,"column":81}},"loc":{"start":{"line":9,"column":95},"end":{"line":11,"column":1}},"line":9},"4":{"name":"(anonymous_4)","decl":{"start":{"line":11,"column":5},"end":{"line":11,"column":6}},"loc":{"start":{"line":11,"column":20},"end":{"line":13,"column":1}},"line":11},"5":{"name":"(anonymous_5)","decl":{"start":{"line":14,"column":50},"end":{"line":14,"column":51}},"loc":{"start":{"line":14,"column":65},"end":{"line":20,"column":1}},"line":14},"6":{"name":"(anonymous_6)","decl":{"start":{"line":21,"column":56},"end":{"line":21,"column":57}},"loc":{"start":{"line":21,"column":71},"end":{"line":23,"column":1}},"line":21},"7":{"name":"(anonymous_7)","decl":{"start":{"line":35,"column":65},"end":{"line":35,"column":66}},"loc":{"start":{"line":35,"column":77},"end":{"line":35,"column":102}},"line":35},"8":{"name":"(anonymous_8)","decl":{"start":{"line":37,"column":68},"end":{"line":37,"column":69}},"loc":{"start":{"line":37,"column":80},"end":{"line":37,"column":111}},"line":37},"9":{"name":"(anonymous_9)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":25},"end":{"line":54,"column":5}},"line":39},"10":{"name":"(anonymous_10)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":38},"end":{"line":57,"column":5}},"line":55},"11":{"name":"(anonymous_11)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":60},"end":{"line":71,"column":5}},"line":66},"12":{"name":"(anonymous_12)","decl":{"start":{"line":79,"column":4},"end":{"line":79,"column":5}},"loc":{"start":{"line":79,"column":46},"end":{"line":81,"column":5}},"line":79},"13":{"name":"(anonymous_13)","decl":{"start":{"line":88,"column":4},"end":{"line":88,"column":5}},"loc":{"start":{"line":88,"column":40},"end":{"line":91,"column":5}},"line":88},"14":{"name":"(anonymous_14)","decl":{"start":{"line":101,"column":4},"end":{"line":101,"column":5}},"loc":{"start":{"line":101,"column":55},"end":{"line":154,"column":5}},"line":101},"15":{"name":"(anonymous_15)","decl":{"start":{"line":161,"column":4},"end":{"line":161,"column":5}},"loc":{"start":{"line":161,"column":38},"end":{"line":165,"column":5}},"line":161},"16":{"name":"(anonymous_16)","decl":{"start":{"line":174,"column":4},"end":{"line":174,"column":5}},"loc":{"start":{"line":174,"column":43},"end":{"line":177,"column":5}},"line":174},"17":{"name":"(anonymous_17)","decl":{"start":{"line":185,"column":4},"end":{"line":185,"column":5}},"loc":{"start":{"line":185,"column":29},"end":{"line":202,"column":5}},"line":185},"18":{"name":"(anonymous_18)","decl":{"start":{"line":210,"column":4},"end":{"line":210,"column":5}},"loc":{"start":{"line":210,"column":46},"end":{"line":235,"column":5}},"line":210},"19":{"name":"(anonymous_19)","decl":{"start":{"line":242,"column":4},"end":{"line":242,"column":5}},"loc":{"start":{"line":242,"column":33},"end":{"line":258,"column":5}},"line":242},"20":{"name":"(anonymous_20)","decl":{"start":{"line":265,"column":4},"end":{"line":265,"column":5}},"loc":{"start":{"line":265,"column":29},"end":{"line":307,"column":5}},"line":265},"21":{"name":"(anonymous_21)","decl":{"start":{"line":315,"column":4},"end":{"line":315,"column":5}},"loc":{"start":{"line":315,"column":44},"end":{"line":329,"column":5}},"line":315},"22":{"name":"(anonymous_22)","decl":{"start":{"line":336,"column":4},"end":{"line":336,"column":5}},"loc":{"start":{"line":336,"column":33},"end":{"line":340,"column":5}},"line":336},"23":{"name":"(anonymous_23)","decl":{"start":{"line":349,"column":4},"end":{"line":349,"column":5}},"loc":{"start":{"line":349,"column":46},"end":{"line":351,"column":5}},"line":349},"24":{"name":"(anonymous_24)","decl":{"start":{"line":358,"column":4},"end":{"line":358,"column":5}},"loc":{"start":{"line":358,"column":27},"end":{"line":360,"column":5}},"line":358},"25":{"name":"(anonymous_25)","decl":{"start":{"line":368,"column":4},"end":{"line":368,"column":5}},"loc":{"start":{"line":368,"column":43},"end":{"line":370,"column":5}},"line":368},"26":{"name":"(anonymous_26)","decl":{"start":{"line":378,"column":4},"end":{"line":378,"column":5}},"loc":{"start":{"line":378,"column":45},"end":{"line":383,"column":5}},"line":378},"27":{"name":"(anonymous_27)","decl":{"start":{"line":391,"column":4},"end":{"line":391,"column":5}},"loc":{"start":{"line":391,"column":45},"end":{"line":407,"column":5}},"line":391},"28":{"name":"(anonymous_28)","decl":{"start":{"line":408,"column":4},"end":{"line":408,"column":5}},"loc":{"start":{"line":408,"column":33},"end":{"line":415,"column":5}},"line":408}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":8,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":8,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":5,"column":1}},{"start":{"line":5,"column":6},"end":{"line":8,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},{"start":{"line":6,"column":4},"end":{"line":6,"column":33}}],"line":6},"4":{"loc":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"type":"binary-expr","locations":[{"start":{"line":9,"column":26},"end":{"line":9,"column":30}},{"start":{"line":9,"column":34},"end":{"line":9,"column":57}},{"start":{"line":9,"column":63},"end":{"line":13,"column":1}}],"line":9},"5":{"loc":{"start":{"line":9,"column":63},"end":{"line":13,"column":1}},"type":"cond-expr","locations":[{"start":{"line":9,"column":80},"end":{"line":11,"column":1}},{"start":{"line":11,"column":5},"end":{"line":13,"column":1}}],"line":9},"6":{"loc":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"type":"binary-expr","locations":[{"start":{"line":14,"column":20},"end":{"line":14,"column":24}},{"start":{"line":14,"column":28},"end":{"line":14,"column":45}},{"start":{"line":14,"column":50},"end":{"line":20,"column":1}}],"line":14},"7":{"loc":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},{"start":{"line":15,"column":4},"end":{"line":15,"column":42}}],"line":15},"8":{"loc":{"start":{"line":15,"column":8},"end":{"line":15,"column":29}},"type":"binary-expr","locations":[{"start":{"line":15,"column":8},"end":{"line":15,"column":11}},{"start":{"line":15,"column":15},"end":{"line":15,"column":29}}],"line":15},"9":{"loc":{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},{"start":{"line":17,"column":4},"end":{"line":17,"column":141}}],"line":17},"10":{"loc":{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},"type":"if","locations":[{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},{"start":{"line":17,"column":40},"end":{"line":17,"column":141}}],"line":17},"11":{"loc":{"start":{"line":17,"column":44},"end":{"line":17,"column":107}},"type":"binary-expr","locations":[{"start":{"line":17,"column":44},"end":{"line":17,"column":59}},{"start":{"line":17,"column":63},"end":{"line":17,"column":107}}],"line":17},"12":{"loc":{"start":{"line":21,"column":22},"end":{"line":23,"column":1}},"type":"binary-expr","locations":[{"start":{"line":21,"column":23},"end":{"line":21,"column":27}},{"start":{"line":21,"column":31},"end":{"line":21,"column":51}},{"start":{"line":21,"column":56},"end":{"line":23,"column":1}}],"line":21},"13":{"loc":{"start":{"line":22,"column":11},"end":{"line":22,"column":61}},"type":"cond-expr","locations":[{"start":{"line":22,"column":37},"end":{"line":22,"column":40}},{"start":{"line":22,"column":43},"end":{"line":22,"column":61}}],"line":22},"14":{"loc":{"start":{"line":22,"column":12},"end":{"line":22,"column":33}},"type":"binary-expr","locations":[{"start":{"line":22,"column":12},"end":{"line":22,"column":15}},{"start":{"line":22,"column":19},"end":{"line":22,"column":33}}],"line":22},"15":{"loc":{"start":{"line":40,"column":8},"end":{"line":41,"column":61}},"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":41,"column":61}},{"start":{"line":40,"column":8},"end":{"line":41,"column":61}}],"line":40},"16":{"loc":{"start":{"line":42,"column":19},"end":{"line":42,"column":57}},"type":"binary-expr","locations":[{"start":{"line":42,"column":19},"end":{"line":42,"column":30}},{"start":{"line":42,"column":34},"end":{"line":42,"column":57}}],"line":42},"17":{"loc":{"start":{"line":103,"column":8},"end":{"line":103,"column":39}},"type":"binary-expr","locations":[{"start":{"line":103,"column":8},"end":{"line":103,"column":18}},{"start":{"line":103,"column":23},"end":{"line":103,"column":38}}],"line":103},"18":{"loc":{"start":{"line":104,"column":8},"end":{"line":104,"column":37}},"type":"binary-expr","locations":[{"start":{"line":104,"column":8},"end":{"line":104,"column":12}},{"start":{"line":104,"column":17},"end":{"line":104,"column":36}}],"line":104},"19":{"loc":{"start":{"line":107,"column":8},"end":{"line":111,"column":9}},"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":111,"column":9}},{"start":{"line":107,"column":8},"end":{"line":111,"column":9}}],"line":107},"20":{"loc":{"start":{"line":114,"column":8},"end":{"line":121,"column":9}},"type":"if","locations":[{"start":{"line":114,"column":8},"end":{"line":121,"column":9}},{"start":{"line":114,"column":8},"end":{"line":121,"column":9}}],"line":114},"21":{"loc":{"start":{"line":124,"column":8},"end":{"line":131,"column":9}},"type":"if","locations":[{"start":{"line":124,"column":8},"end":{"line":131,"column":9}},{"start":{"line":124,"column":8},"end":{"line":131,"column":9}}],"line":124},"22":{"loc":{"start":{"line":148,"column":8},"end":{"line":152,"column":9}},"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":152,"column":9}}],"line":148},"23":{"loc":{"start":{"line":195,"column":8},"end":{"line":196,"column":25}},"type":"if","locations":[{"start":{"line":195,"column":8},"end":{"line":196,"column":25}},{"start":{"line":195,"column":8},"end":{"line":196,"column":25}}],"line":195},"24":{"loc":{"start":{"line":198,"column":8},"end":{"line":199,"column":25}},"type":"if","locations":[{"start":{"line":198,"column":8},"end":{"line":199,"column":25}},{"start":{"line":198,"column":8},"end":{"line":199,"column":25}}],"line":198},"25":{"loc":{"start":{"line":211,"column":8},"end":{"line":212,"column":57}},"type":"if","locations":[{"start":{"line":211,"column":8},"end":{"line":212,"column":57}},{"start":{"line":211,"column":8},"end":{"line":212,"column":57}}],"line":211},"26":{"loc":{"start":{"line":213,"column":8},"end":{"line":214,"column":57}},"type":"if","locations":[{"start":{"line":213,"column":8},"end":{"line":214,"column":57}},{"start":{"line":213,"column":8},"end":{"line":214,"column":57}}],"line":213},"27":{"loc":{"start":{"line":216,"column":8},"end":{"line":217,"column":39}},"type":"if","locations":[{"start":{"line":216,"column":8},"end":{"line":217,"column":39}},{"start":{"line":216,"column":8},"end":{"line":217,"column":39}}],"line":216},"28":{"loc":{"start":{"line":221,"column":8},"end":{"line":222,"column":25}},"type":"if","locations":[{"start":{"line":221,"column":8},"end":{"line":222,"column":25}},{"start":{"line":221,"column":8},"end":{"line":222,"column":25}}],"line":221},"29":{"loc":{"start":{"line":225,"column":8},"end":{"line":226,"column":25}},"type":"if","locations":[{"start":{"line":225,"column":8},"end":{"line":226,"column":25}},{"start":{"line":225,"column":8},"end":{"line":226,"column":25}}],"line":225},"30":{"loc":{"start":{"line":228,"column":8},"end":{"line":229,"column":25}},"type":"if","locations":[{"start":{"line":228,"column":8},"end":{"line":229,"column":25}},{"start":{"line":228,"column":8},"end":{"line":229,"column":25}}],"line":228},"31":{"loc":{"start":{"line":231,"column":8},"end":{"line":232,"column":25}},"type":"if","locations":[{"start":{"line":231,"column":8},"end":{"line":232,"column":25}},{"start":{"line":231,"column":8},"end":{"line":232,"column":25}}],"line":231},"32":{"loc":{"start":{"line":249,"column":8},"end":{"line":252,"column":9}},"type":"if","locations":[{"start":{"line":249,"column":8},"end":{"line":252,"column":9}},{"start":{"line":249,"column":8},"end":{"line":252,"column":9}}],"line":249},"33":{"loc":{"start":{"line":254,"column":8},"end":{"line":255,"column":25}},"type":"if","locations":[{"start":{"line":254,"column":8},"end":{"line":255,"column":25}},{"start":{"line":254,"column":8},"end":{"line":255,"column":25}}],"line":254},"34":{"loc":{"start":{"line":286,"column":8},"end":{"line":290,"column":9}},"type":"if","locations":[{"start":{"line":286,"column":8},"end":{"line":290,"column":9}},{"start":{"line":286,"column":8},"end":{"line":290,"column":9}}],"line":286},"35":{"loc":{"start":{"line":293,"column":12},"end":{"line":296,"column":13}},"type":"if","locations":[{"start":{"line":293,"column":12},"end":{"line":296,"column":13}},{"start":{"line":293,"column":12},"end":{"line":296,"column":13}}],"line":293},"36":{"loc":{"start":{"line":294,"column":16},"end":{"line":294,"column":63}},"type":"binary-expr","locations":[{"start":{"line":294,"column":16},"end":{"line":294,"column":42}},{"start":{"line":294,"column":47},"end":{"line":294,"column":62}}],"line":294},"37":{"loc":{"start":{"line":337,"column":19},"end":{"line":337,"column":41}},"type":"binary-expr","locations":[{"start":{"line":337,"column":19},"end":{"line":337,"column":35}},{"start":{"line":337,"column":39},"end":{"line":337,"column":41}}],"line":337},"38":{"loc":{"start":{"line":379,"column":31},"end":{"line":381,"column":16}},"type":"cond-expr","locations":[{"start":{"line":380,"column":14},"end":{"line":380,"column":57}},{"start":{"line":381,"column":14},"end":{"line":381,"column":16}}],"line":379},"39":{"loc":{"start":{"line":395,"column":8},"end":{"line":399,"column":9}},"type":"if","locations":[{"start":{"line":395,"column":8},"end":{"line":399,"column":9}},{"start":{"line":395,"column":8},"end":{"line":399,"column":9}}],"line":395},"40":{"loc":{"start":{"line":402,"column":8},"end":{"line":405,"column":9}},"type":"if","locations":[{"start":{"line":402,"column":8},"end":{"line":405,"column":9}},{"start":{"line":402,"column":8},"end":{"line":405,"column":9}}],"line":402},"41":{"loc":{"start":{"line":402,"column":12},"end":{"line":402,"column":71}},"type":"binary-expr","locations":[{"start":{"line":402,"column":12},"end":{"line":402,"column":23}},{"start":{"line":402,"column":27},"end":{"line":402,"column":71}}],"line":402},"42":{"loc":{"start":{"line":408,"column":19},"end":{"line":408,"column":31}},"type":"default-arg","locations":[{"start":{"line":408,"column":29},"end":{"line":408,"column":31}}],"line":408}},"s":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":1,"12":1,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":4,"36":1,"37":1,"38":0,"39":1,"40":0,"41":1,"42":1,"43":1,"44":1,"45":1,"46":59,"47":1,"48":1,"49":5,"50":5,"51":5,"52":81,"53":81,"54":81,"55":81,"56":81,"57":81,"58":1,"59":1,"60":1,"61":80,"62":80,"63":79,"64":1,"65":1,"66":1,"67":79,"68":79,"69":76,"70":76,"71":3,"72":3,"73":79,"74":95,"75":79,"76":78,"77":78,"78":78,"79":81,"80":81,"81":81,"82":2,"83":2,"84":4,"85":4,"86":4,"87":6,"88":6,"89":6,"90":4,"91":4,"92":4,"93":2,"94":2,"95":2,"96":0,"97":2,"98":2,"99":7,"100":1,"101":6,"102":1,"103":5,"104":5,"105":5,"106":5,"107":5,"108":5,"109":5,"110":1,"111":4,"112":4,"113":4,"114":0,"115":4,"116":4,"117":2,"118":2,"119":2,"120":0,"121":2,"122":2,"123":20,"124":20,"125":20,"126":20,"127":20,"128":20,"129":20,"130":2,"131":2,"132":18,"133":18,"134":0,"135":18,"136":18,"137":104,"138":104,"139":104,"140":104,"141":104,"142":104,"143":104,"144":104,"145":104,"146":1,"147":1,"148":1,"149":103,"150":103,"151":170,"152":141,"153":141,"154":103,"155":103,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":6,"169":6,"170":6,"171":4,"172":1,"173":1,"174":1,"175":1,"176":3,"177":3,"178":3,"179":3,"180":1,"181":1,"182":1,"183":2,"184":2,"185":2,"186":1,"187":1,"188":1,"189":14,"190":14,"191":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":1,"6":1,"7":4,"8":0,"9":1,"10":59,"11":1,"12":5,"13":5,"14":81,"15":81,"16":2,"17":4,"18":7,"19":20,"20":104,"21":1,"22":6,"23":4,"24":1,"25":1,"26":1,"27":3,"28":14},"b":{"0":[1,1,1],"1":[1,0],"2":[0,0],"3":[0,0],"4":[1,1,1],"5":[1,0],"6":[1,1,1],"7":[1,0],"8":[1,1],"9":[0,0],"10":[0,0],"11":[0,0],"12":[1,1,1],"13":[0,1],"14":[1,1],"15":[0,1],"16":[1,0],"17":[81,26],"18":[81,79],"19":[1,80],"20":[79,1],"21":[76,3],"22":[78],"23":[2,2],"24":[0,2],"25":[1,6],"26":[1,5],"27":[5,0],"28":[1,4],"29":[0,4],"30":[2,2],"31":[0,2],"32":[2,18],"33":[0,18],"34":[1,103],"35":[141,29],"36":[141,133],"37":[6,1],"38":[1,0],"39":[1,2],"40":[1,1],"41":[2,1],"42":[0]},"inputSourceMap":{"version":3,"file":"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/index.ts","sources":["/home/snorr/Documents/code/jaggu/nbs/larvituser/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { DataWriter } from './dataWriter';\nimport { Helpers } from './helpers';\nimport { Log, LogInstance, Utils } from 'larvitutils';\nimport { UserBase, UserBaseOptions } from './userBase';\nimport { Users, UsersOptions } from './users';\nimport * as uuidLib from 'uuid';\nimport bcrypt from 'bcryptjs';\n\nconst topLogPrefix = 'larvituser: index.ts:';\n\nexport { Users } from './users';\nexport { UserBase } from './userBase';\n\nexport type UserLibOptions = {\n\tdb: any,\n\tlog?: LogInstance,\n}\n\nexport class UserLib {\n\tpublic helpers: Helpers;\n\n\tprivate dataWriter: DataWriter;\n\tprivate log: LogInstance;\n\tprivate lUtils: Utils;\n\tprivate options: Omit<UserLibOptions, 'log'>;\n\n\tconstructor(options: UserLibOptions) {\n\t\tif (!options.db) throw new Error('Required option db is missing');\n\n\t\tthis.log = options.log ?? new Log();\n\t\tthis.options = options;\n\t\tthis.lUtils = new Utils({ log: this.log });\n\t\tthis.dataWriter = new DataWriter({\n\t\t\tlog: this.log,\n\t\t\tdb: options.db,\n\t\t});\n\t\tthis.helpers = new Helpers({\n\t\t\tdataWriter: this.dataWriter,\n\t\t\tlog: this.log,\n\t\t\tdb: options.db,\n\t\t});\n\t}\n\n\tasync runDbMigrations(scriptPath?: string): Promise<void> {\n\t\tawait this.dataWriter.runDbMigrations(scriptPath);\n\t}\n\n\t/**\n\t * Add a single user field to database\n\t *\n\t * @param {string} userUuid -\n\t * @param {string} fieldName -\n\t * @param {string} fieldValue -\n\t * @returns {Promise<void>} -\n\t */\n\tasync addUserDataField(userUuid: string, fieldName: string, fieldValue: string | string[])\n\t\t: Promise<void> {\n\t\tconst fields: Record<string, string | string[]> = {\n\t\t\t[fieldName]: fieldValue,\n\t\t};\n\n\t\tawait this.addUserDataFields(userUuid, fields);\n\t}\n\n\t/**\n\t * Add user fields\n\t *\n\t * @param {string} userUuid -\n\t * @param {object} fields - field name as key, field values as array to that key - ex: {'role': ['admin','user']}\n\t * @returns {Promise<void>} -\n\t */\n\tasync addUserDataFields(userUuid: string, fields: Record<string, string | string[]>)\n\t\t: Promise<void> {\n\t\tawait this.dataWriter.addUserDataFields(userUuid, fields);\n\t}\n\n\t/**\n\t * Checks a password for validity\n\t * @param {string} password - plain text password\n\t * @param {string} hash - hash to check password against\n\t * @param {Promise<boolean>} - True if password matches\n\t */\n\tasync checkPassword(password: string, hash: string): Promise<boolean> {\n\t\tpassword = password.trim();\n\n\t\treturn await bcrypt.compare(password, hash);\n\t}\n\n\t/**\n\t * Creates a new user (and adds to it to db)\n\t *\n\t * @param {string} username -\n\t * @param {string} password (plain text) or false for no password (user will not be able to login at all)\n\t * @param {object} userFields - key, value pairs, where value can be an array of values\n\t * @param {string} uuid - if not supplied a random will be generated\n\t * @returns {Promise<UserBase>} - The newly created user\n\t */\n\tasync create(username: string, password: string, userFields?: Record<string, string | string[]>, uuid?: string)\n\t\t: Promise<UserBase> {\n\t\tconst logPrefix = `${topLogPrefix} create() -`;\n\n\t\tuserFields ??= {};\n\t\tuuid ??= uuidLib.v1();\n\t\tusername = username.trim();\n\t\tpassword = password?.trim();\n\n\t\tif (!username.length) {\n\t\t\tconst err = new Error('Trying to create user with empty username');\n\t\t\tthis.log.warn(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\t// Check for username availability\n\t\tconst isAvailable = await this.usernameAvailable(username);\n\t\tif (isAvailable) {\n\t\t\tthis.log.debug(`${logPrefix} Username available: \"${username}\"`);\n\t\t} else {\n\t\t\tconst err = new Error('Trying to create user with taken username: \"' + username + '\"');\n\t\t\tthis.log.info(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\t// Hash Password\n\t\tlet hashedPassword = '';\n\t\tif (!password) {\n\t\t\tthis.log.debug(`${logPrefix} Password set to empty string for no-login, username: \"${username}\"`);\n\t\t\thashedPassword = '';\n\t\t} else {\n\t\t\thashedPassword = await this.hashPassword(password);\n\t\t\tthis.log.debug(`${logPrefix} Password hashed, username: \"${username}\"`);\n\t\t}\n\n\t\t// Create all fields\n\t\t// TODO: Parallel?\n\t\tfor (const fieldName of Object.keys(userFields)) {\n\t\t\tawait this.helpers.getFieldUuid(fieldName);\n\t\t}\n\n\t\t// Write new user\n\t\tawait this.dataWriter.create({\n\t\t\tuuid,\n\t\t\tusername,\n\t\t\tpassword: hashedPassword,\n\t\t\tfields: userFields,\n\t\t});\n\n\t\t// Get new user\n\t\tconst user = await this.fromUuid(uuid);\n\n\t\t// Non-tivial to test\n\t\t/* istanbul ignore if */\n\t\tif (typeof user === 'boolean') {\n\t\t\tconst err = new Error(`Failed to get newly created user, uuid: ${uuid}`);\n\t\t\tthis.log.warn(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\treturn user;\n\t}\n\n\t/**\n\t * Checks if a unsername is available\n\t *\n\t * @param {string} username -\n\t * @returns {Promise<boolean>} -\n\t */\n\tasync usernameAvailable(username: string): Promise<boolean> {\n\t\tusername = username.trim();\n\n\t\tconst { rows } = await this.options.db.query('SELECT uuid FROM user_users WHERE username = ?', [username]);\n\n\t\treturn rows.length === 0;\n\t}\n\n\t/**\n\t * Create a user object from a field\n\t * IMPORTANT! Only fetches first matching user!\n\t *\n\t * @param {string} fieldName -\n\t * @param {string} fieldValue -\n\t * @returns {Promise<UserBase | boolean>} - \"user\" being a new user object or boolean false on failed search\n\t */\n\tasync fromField(fieldName: string, fieldValue: string): Promise<UserBase | boolean> {\n\t\tconst user = await this.fromFields({ [fieldName]: fieldValue });\n\n\t\treturn user;\n\t}\n\n\t/**\n\t * Create a user object from fields\n\t * IMPORTANT! Only fetches first matching user that matches all fields!\n\t *\n\t * @param {object} fields - {'fieldName': 'fieldValue', 'fieldName2': 'fieldValue2'}\n\t * @returns {Promise<UserBase | false>} - \"user\" being a new user object or boolean false on failed search\n\t */\n\tasync fromFields(fields: Record<string, string>): Promise<UserBase | boolean> {\n\t\tconst dbFields = [];\n\t\tlet sql = 'SELECT uuid FROM user_users u\\nWHERE\\n 1 + 1\\n';\n\n\t\tfor (const fieldName of Object.keys(fields)) {\n\t\t\tsql += ' AND uuid IN (SELECT userUuid FROM user_users_data WHERE data = ? AND fieldUuid = (SELECT uuid FROM user_data_fields WHERE name = ?))\\n';\n\t\t\tdbFields.push(fields[fieldName].trim());\n\t\t\tdbFields.push(fieldName.trim());\n\t\t}\n\n\t\tsql += 'LIMIT 1';\n\n\t\tconst { rows } = await this.options.db.query(sql, dbFields);\n\t\tif (rows.length === 0) return false;\n\n\t\tconst userUuid = this.lUtils.formatUuid(rows[0].uuid);\n\t\tif (typeof userUuid === 'boolean') return false;\n\n\t\tconst user = await this.fromUuid(userUuid);\n\n\t\treturn user;\n\t}\n\n\t/**\n\t * Create a user object from username and password\n\t *\n\t * @param {string} username -\n\t * @param {string} password -\n\t * @returns {Promise<UserBase | boolean>} - \"user\" being a new user object or boolean false on failed login\n\t */\n\tasync fromUserAndPass(username: string, password: string): Promise<UserBase | boolean> {\n\t\tif (typeof username !== 'string') throw new Error('Username must be a string');\n\t\tif (typeof password !== 'string') throw new Error('Password must be a string');\n\n\t\tusername = username.trim();\n\t\tif (password) password = password.trim();\n\n\t\tconst dbFields = [username];\n\t\tconst sql = 'SELECT uuid, password FROM user_users WHERE username = ?';\n\t\tconst { rows } = await this.options.db.query(sql, dbFields);\n\t\tif (!rows.length) return false;\n\n\t\tconst hashedPassword = rows[0].password;\n\t\tconst userUuidBuffer = rows[0].uuid;\n\n\t\tif (!hashedPassword) return false;\n\n\t\tconst isCorrectPassword = await this.checkPassword(password, hashedPassword);\n\t\tif (!isCorrectPassword) return false;\n\n\t\tconst userUuid = this.lUtils.formatUuid(userUuidBuffer);\n\t\tif (typeof userUuid === 'boolean') return false;\n\t\tconst user = await this.fromUuid(userUuid);\n\n\t\treturn user;\n\t}\n\n\t/**\n\t * Create a user object from username\n\t *\n\t * @param {string} username -\n\t * @returns {Promise<UserBase | boolean>} - \"user\" being a new user object\n\t */\n\tasync fromUsername(username: string): Promise<UserBase | boolean> {\n\t\tconst logPrefix = `${topLogPrefix}fromUsername() -`;\n\t\tconst dbFields = [];\n\t\tconst sql = 'SELECT uuid FROM user_users WHERE username = ?';\n\n\t\tusername = username.trim();\n\t\tdbFields.push(username);\n\n\t\tconst { rows } = await this.options.db.query(sql, dbFields);\n\t\tif (!rows.length) {\n\t\t\tthis.log.debug(`${logPrefix}No user found for username: \"${username}\"`);\n\n\t\t\treturn false;\n\t\t}\n\n\t\tconst userUuid = this.lUtils.formatUuid(rows[0].uuid);\n\t\tif (typeof userUuid === 'boolean') return false;\n\t\tconst user = await this.fromUuid(userUuid);\n\n\t\treturn user;\n\t}\n\n\t/**\n\t * Instanciate user object from user id\n\t *\n\t * @param {number} userUuid -\n\t * @returns {Promise<UserBase>} userObj will be false if no user is found\n\t */\n\tasync fromUuid(userUuid: string): Promise<UserBase | false> {\n\t\tconst { helpers, lUtils } = this;\n\t\tconst { db } = this.options;\n\t\tconst { log } = this;\n\t\tconst logPrefix = `${topLogPrefix} fromUuid() -`;\n\t\tconst sql = 'SELECT\\n' +\n\t\t\t\t' u.uuid,\\n' +\n\t\t\t\t' u.username,\\n' +\n\t\t\t\t' u.password,\\n' +\n\t\t\t\t' uf.uuid AS fieldUuid,\\n' +\n\t\t\t\t' uf.name AS fieldName,\\n' +\n\t\t\t\t' ud.data AS fieldData\\n' +\n\t\t\t\t'FROM\\n' +\n\t\t\t\t' user_users u\\n' +\n\t\t\t\t'  LEFT JOIN user_users_data ud ON ud.userUuid = u.uuid\\n' +\n\t\t\t\t'  LEFT JOIN user_data_fields uf ON uf.uuid = ud.fieldUuid\\n' +\n\t\t\t\t'WHERE u.uuid = ?';\n\n\t\tconst userUuidBuf = helpers.valueOrThrow(lUtils.uuidToBuffer(userUuid), logPrefix, 'Invalid userUuid');\n\n\t\tconst dbFields = [userUuidBuf];\n\n\t\tconst { rows } = await db.query(sql, dbFields);\n\t\tif (rows.length === 0) {\n\t\t\tconst err = new Error(`No user found for userUuid: \"${userUuid}\"`);\n\t\t\tlog.debug(logPrefix + err.message);\n\n\t\t\treturn false;\n\t\t}\n\n\t\tconst fields: Record<string, string[]> = {};\n\t\tfor (const row of rows) {\n\t\t\tif (row.fieldUuid) {\n\t\t\t\tfields[row.fieldName] ??= [];\n\t\t\t\tfields[row.fieldName].push(row.fieldData);\n\t\t\t}\n\t\t}\n\n\t\tconst userBaseOptions: UserBaseOptions = {\n\t\t\tuserInstance: this,\n\t\t\tlog,\n\t\t\tuuid: userUuid,\n\t\t\tusername: rows[0].username,\n\t\t\tpasswordIsFalse: !rows[0].password,\n\t\t\tfields,\n\t\t};\n\n\t\treturn new UserBase(userBaseOptions);\n\t}\n\n\t/**\n\t * Get field data for a user\n\t *\n\t * @param {string} userUuid -\n\t * @param {string} fieldName -\n\t * @returns {Promise<string[]>} data is always an array of data (or empty array)\n\t */\n\tasync getFieldData(userUuid: string, fieldName: string): Promise<string[]> {\n\t\tconst { helpers, lUtils } = this;\n\t\tconst logPrefix = `${topLogPrefix} getFieldData() -`;\n\n\t\tconst userUuidBuffer = helpers.valueOrThrow(lUtils.uuidToBuffer(userUuid), logPrefix, 'Invalid user uuid');\n\t\tconst fieldUuid = await helpers.getFieldUuid(fieldName);\n\t\tconst fieldUuidBuffer = helpers.valueOrThrow(lUtils.uuidToBuffer(fieldUuid as string), logPrefix, 'Invalid field uuid');\n\n\t\tconst dbFields = [userUuidBuffer, fieldUuidBuffer];\n\t\tconst sql = 'SELECT data FROM user_users_data WHERE userUuid = ? AND fieldUuid = ?';\n\n\t\tconst { rows } = await this.options.db.query(sql, dbFields);\n\t\tconst data = [];\n\t\tfor (const row of rows) {\n\t\t\tdata.push(row.data);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * Hashes a new password\n\t *\n\t * @param {string} password -\n\t * @returns {Promise<string>} Hashed password\n\t */\n\tasync hashPassword(password: string): Promise<string> {\n\t\tpassword = password?.trim() ?? '';\n\n\t\tconst hash = await bcrypt.hash(password, 10);\n\n\t\treturn hash;\n\t}\n\n\t/**\n\t * Replace all fields\n\t * IMPORTANT!!! Will clear all data not given in the fields parameter\n\t *\n\t * @param {string} userUuid -\n\t * @param {object} fields - field name as key, field values as array to that key - ex: {'role': ['admin','user']}\n\t * @returns {Promise<void>} -\n\t */\n\tasync replaceUserFields(userUuid: string, fields: Record<string, string | string[]>): Promise<void> {\n\t\tawait this.dataWriter.replaceFields(userUuid, fields);\n\t}\n\n\t/**\n\t * Remove a user\n\t *\n\t * @param {string} userUuid -\n\t * @returns {Promise<void>} -\n\t */\n\tasync rmUser(userUuid: string): Promise<void> {\n\t\tawait this.dataWriter.rmUser(userUuid);\n\t}\n\n\t/**\n\t * Remove a user field\n\t *\n\t * @param {string} userUuid -\n\t * @param {string} fieldName -\n\t * @returns {Promise<void>} -\n\t */\n\tasync rmUserField(userUuid: string, fieldName: string): Promise<void> {\n\t\tawait this.dataWriter.rmUserField(userUuid, fieldName);\n\t}\n\n\t/**\n\t * Set password for a user\n\t *\n\t * @param {string} userUuid -\n\t * @param {string} newPassword (plain text) or false for no valid password (user will not be able to login at all)\n\t * @returns {Promise<void>} -\n\t */\n\tasync setPassword(userUuid: string, newPassword: string | boolean): Promise<void> {\n\t\tconst hashedPassword = typeof newPassword === 'string'\n\t\t\t? await this.hashPassword(newPassword.trim())\n\t\t\t: '';\n\n\t\tawait this.dataWriter.setPassword(userUuid, hashedPassword);\n\t}\n\n\t/**\n\t * Set the username for a user\n\t *\n\t * @param {string} userUuid -\n\t * @param {string} newUsername -\n\t * @returns {Promise<void>} -\n\t */\n\tasync setUsername(userUuid: string, newUsername: string): Promise<void> {\n\t\tconst { helpers, lUtils } = this;\n\t\tconst logPrefix = `${topLogPrefix} setUsername() -`;\n\n\t\tnewUsername = newUsername.trim();\n\t\tif (!newUsername) {\n\t\t\tconst err = new Error('No new username supplied');\n\t\t\tthis.log.warn(logPrefix + err.message);\n\t\t\tthrow err;\n\t\t}\n\n\t\tconst userUuidBuf = helpers.valueOrThrow(lUtils.uuidToBuffer(userUuid), logPrefix, 'Invalid user uuid');\n\n\t\tconst { rows } = await this.options.db.query('SELECT uuid FROM user_users WHERE username = ? AND uuid != ?', [newUsername, userUuidBuf]);\n\t\tif (rows.length && lUtils.formatUuid(rows[0].uuid) !== userUuid) {\n\t\t\tconst err = new Error('Username is already taken');\n\t\t\tthrow err;\n\t\t}\n\n\t\tawait this.dataWriter.setUsername(userUuid, newUsername);\n\t}\n\n\tasync getUsers(options: Omit<UsersOptions, 'log' | 'db'> = {}): ReturnType<Users['get']> {\n\t\tconst users = new Users({\n\t\t\tdb: this.options.db,\n\t\t\tlog: this.log,\n\t\t\t...options,\n\t\t});\n\n\t\treturn await users.get();\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f05b4d4404a3aaa0d232453ea95fcac5486fe379","contentHash":"8bb6bdf36428b3258145d4478be2262ef3eb902312703b00834a17723e0711e1"},"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/dataWriter.ts":{"path":"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/dataWriter.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":89}},"4":{"start":{"line":4,"column":71},"end":{"line":4,"column":83}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"6":{"start":{"line":6,"column":26},"end":{"line":6,"column":33}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":17}},"8":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":72}},"10":{"start":{"line":12,"column":4},"end":{"line":12,"column":21}},"11":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"12":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"13":{"start":{"line":15,"column":31},"end":{"line":15,"column":42}},"14":{"start":{"line":16,"column":17},"end":{"line":16,"column":19}},"15":{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},"16":{"start":{"line":17,"column":21},"end":{"line":17,"column":141}},"17":{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},"18":{"start":{"line":17,"column":109},"end":{"line":17,"column":141}},"19":{"start":{"line":18,"column":4},"end":{"line":18,"column":36}},"20":{"start":{"line":19,"column":4},"end":{"line":19,"column":18}},"21":{"start":{"line":21,"column":0},"end":{"line":21,"column":62}},"22":{"start":{"line":22,"column":0},"end":{"line":22,"column":28}},"23":{"start":{"line":23,"column":22},"end":{"line":23,"column":44}},"24":{"start":{"line":24,"column":18},"end":{"line":24,"column":38}},"25":{"start":{"line":25,"column":28},"end":{"line":25,"column":56}},"26":{"start":{"line":26,"column":16},"end":{"line":26,"column":45}},"27":{"start":{"line":27,"column":21},"end":{"line":27,"column":50}},"28":{"start":{"line":30,"column":8},"end":{"line":31,"column":60}},"29":{"start":{"line":31,"column":12},"end":{"line":31,"column":60}},"30":{"start":{"line":32,"column":8},"end":{"line":32,"column":29}},"31":{"start":{"line":33,"column":8},"end":{"line":33,"column":58}},"32":{"start":{"line":34,"column":8},"end":{"line":34,"column":65}},"33":{"start":{"line":35,"column":8},"end":{"line":39,"column":11}},"34":{"start":{"line":46,"column":25},"end":{"line":46,"column":90}},"35":{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},"36":{"start":{"line":51,"column":28},"end":{"line":57,"column":10}},"37":{"start":{"line":58,"column":8},"end":{"line":58,"column":32}},"38":{"start":{"line":61,"column":36},"end":{"line":61,"column":40}},"39":{"start":{"line":62,"column":26},"end":{"line":62,"column":65}},"40":{"start":{"line":63,"column":18},"end":{"line":63,"column":82}},"41":{"start":{"line":64,"column":8},"end":{"line":67,"column":9}},"42":{"start":{"line":65,"column":12},"end":{"line":65,"column":64}},"43":{"start":{"line":66,"column":12},"end":{"line":66,"column":19}},"44":{"start":{"line":68,"column":31},"end":{"line":68,"column":113}},"45":{"start":{"line":69,"column":25},"end":{"line":69,"column":27}},"46":{"start":{"line":70,"column":8},"end":{"line":78,"column":9}},"47":{"start":{"line":71,"column":30},"end":{"line":71,"column":134}},"48":{"start":{"line":72,"column":36},"end":{"line":72,"column":120}},"49":{"start":{"line":73,"column":27},"end":{"line":73,"column":69}},"50":{"start":{"line":74,"column":12},"end":{"line":77,"column":13}},"51":{"start":{"line":75,"column":16},"end":{"line":75,"column":34}},"52":{"start":{"line":76,"column":16},"end":{"line":76,"column":70}},"53":{"start":{"line":79,"column":8},"end":{"line":79,"column":53}},"54":{"start":{"line":80,"column":8},"end":{"line":80,"column":43}},"55":{"start":{"line":83,"column":36},"end":{"line":83,"column":40}},"56":{"start":{"line":84,"column":26},"end":{"line":84,"column":60}},"57":{"start":{"line":85,"column":20},"end":{"line":85,"column":82}},"58":{"start":{"line":87,"column":25},"end":{"line":87,"column":104}},"59":{"start":{"line":88,"column":21},"end":{"line":88,"column":81}},"60":{"start":{"line":89,"column":27},"end":{"line":89,"column":107}},"61":{"start":{"line":90,"column":8},"end":{"line":90,"column":53}},"62":{"start":{"line":93,"column":36},"end":{"line":93,"column":40}},"63":{"start":{"line":94,"column":26},"end":{"line":94,"column":54}},"64":{"start":{"line":95,"column":25},"end":{"line":95,"column":27}},"65":{"start":{"line":96,"column":20},"end":{"line":96,"column":93}},"66":{"start":{"line":97,"column":27},"end":{"line":97,"column":135}},"67":{"start":{"line":98,"column":8},"end":{"line":98,"column":34}},"68":{"start":{"line":99,"column":8},"end":{"line":99,"column":37}},"69":{"start":{"line":100,"column":8},"end":{"line":100,"column":37}},"70":{"start":{"line":101,"column":24},"end":{"line":101,"column":58}},"71":{"start":{"line":102,"column":8},"end":{"line":106,"column":9}},"72":{"start":{"line":103,"column":24},"end":{"line":103,"column":133}},"73":{"start":{"line":104,"column":12},"end":{"line":104,"column":57}},"74":{"start":{"line":105,"column":12},"end":{"line":105,"column":22}},"75":{"start":{"line":107,"column":8},"end":{"line":107,"column":61}},"76":{"start":{"line":110,"column":36},"end":{"line":110,"column":40}},"77":{"start":{"line":111,"column":26},"end":{"line":111,"column":61}},"78":{"start":{"line":112,"column":28},"end":{"line":112,"column":134}},"79":{"start":{"line":114,"column":25},"end":{"line":114,"column":100}},"80":{"start":{"line":115,"column":8},"end":{"line":119,"column":9}},"81":{"start":{"line":116,"column":24},"end":{"line":116,"column":112}},"82":{"start":{"line":117,"column":12},"end":{"line":117,"column":57}},"83":{"start":{"line":118,"column":12},"end":{"line":118,"column":22}},"84":{"start":{"line":121,"column":8},"end":{"line":121,"column":93}},"85":{"start":{"line":123,"column":8},"end":{"line":124,"column":19}},"86":{"start":{"line":124,"column":12},"end":{"line":124,"column":19}},"87":{"start":{"line":125,"column":37},"end":{"line":125,"column":39}},"88":{"start":{"line":126,"column":8},"end":{"line":130,"column":9}},"89":{"start":{"line":127,"column":30},"end":{"line":127,"column":146}},"90":{"start":{"line":128,"column":29},"end":{"line":128,"column":154}},"91":{"start":{"line":129,"column":12},"end":{"line":129,"column":55}},"92":{"start":{"line":132,"column":25},"end":{"line":132,"column":27}},"93":{"start":{"line":133,"column":18},"end":{"line":133,"column":82}},"94":{"start":{"line":134,"column":8},"end":{"line":142,"column":9}},"95":{"start":{"line":135,"column":32},"end":{"line":135,"column":74}},"96":{"start":{"line":136,"column":12},"end":{"line":141,"column":13}},"97":{"start":{"line":137,"column":16},"end":{"line":137,"column":34}},"98":{"start":{"line":138,"column":16},"end":{"line":138,"column":43}},"99":{"start":{"line":139,"column":16},"end":{"line":139,"column":63}},"100":{"start":{"line":140,"column":16},"end":{"line":140,"column":42}},"101":{"start":{"line":143,"column":8},"end":{"line":143,"column":53}},"102":{"start":{"line":144,"column":8},"end":{"line":145,"column":19}},"103":{"start":{"line":145,"column":12},"end":{"line":145,"column":19}},"104":{"start":{"line":146,"column":8},"end":{"line":146,"column":43}},"105":{"start":{"line":149,"column":36},"end":{"line":149,"column":40}},"106":{"start":{"line":150,"column":26},"end":{"line":150,"column":54}},"107":{"start":{"line":151,"column":27},"end":{"line":151,"column":110}},"108":{"start":{"line":152,"column":18},"end":{"line":152,"column":67}},"109":{"start":{"line":153,"column":8},"end":{"line":153,"column":47}},"110":{"start":{"line":154,"column":8},"end":{"line":154,"column":55}},"111":{"start":{"line":155,"column":8},"end":{"line":155,"column":47}},"112":{"start":{"line":158,"column":36},"end":{"line":158,"column":40}},"113":{"start":{"line":159,"column":26},"end":{"line":159,"column":59}},"114":{"start":{"line":160,"column":31},"end":{"line":160,"column":114}},"115":{"start":{"line":161,"column":26},"end":{"line":161,"column":148}},"116":{"start":{"line":162,"column":32},"end":{"line":162,"column":117}},"117":{"start":{"line":163,"column":20},"end":{"line":163,"column":86}},"118":{"start":{"line":164,"column":8},"end":{"line":164,"column":68}},"119":{"start":{"line":167,"column":36},"end":{"line":167,"column":40}},"120":{"start":{"line":168,"column":26},"end":{"line":168,"column":59}},"121":{"start":{"line":169,"column":31},"end":{"line":169,"column":114}},"122":{"start":{"line":170,"column":25},"end":{"line":170,"column":27}},"123":{"start":{"line":171,"column":8},"end":{"line":171,"column":32}},"124":{"start":{"line":172,"column":8},"end":{"line":172,"column":38}},"125":{"start":{"line":173,"column":20},"end":{"line":173,"column":72}},"126":{"start":{"line":174,"column":8},"end":{"line":174,"column":43}},"127":{"start":{"line":177,"column":36},"end":{"line":177,"column":40}},"128":{"start":{"line":178,"column":26},"end":{"line":178,"column":59}},"129":{"start":{"line":179,"column":31},"end":{"line":179,"column":114}},"130":{"start":{"line":180,"column":20},"end":{"line":180,"column":72}},"131":{"start":{"line":181,"column":25},"end":{"line":181,"column":51}},"132":{"start":{"line":182,"column":8},"end":{"line":182,"column":43}},"133":{"start":{"line":185,"column":0},"end":{"line":185,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":5,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":58},"end":{"line":4,"column":59}},"loc":{"start":{"line":4,"column":69},"end":{"line":4,"column":85}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":5,"column":6},"end":{"line":5,"column":7}},"loc":{"start":{"line":5,"column":28},"end":{"line":8,"column":1}},"line":5},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":80},"end":{"line":9,"column":81}},"loc":{"start":{"line":9,"column":95},"end":{"line":11,"column":1}},"line":9},"4":{"name":"(anonymous_4)","decl":{"start":{"line":11,"column":5},"end":{"line":11,"column":6}},"loc":{"start":{"line":11,"column":20},"end":{"line":13,"column":1}},"line":11},"5":{"name":"(anonymous_5)","decl":{"start":{"line":14,"column":50},"end":{"line":14,"column":51}},"loc":{"start":{"line":14,"column":65},"end":{"line":20,"column":1}},"line":14},"6":{"name":"(anonymous_6)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":25},"end":{"line":40,"column":5}},"line":29},"7":{"name":"(anonymous_7)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":38},"end":{"line":59,"column":5}},"line":41},"8":{"name":"(anonymous_8)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":46},"end":{"line":81,"column":5}},"line":60},"9":{"name":"(anonymous_9)","decl":{"start":{"line":82,"column":4},"end":{"line":82,"column":5}},"loc":{"start":{"line":82,"column":29},"end":{"line":91,"column":5}},"line":82},"10":{"name":"(anonymous_10)","decl":{"start":{"line":92,"column":4},"end":{"line":92,"column":5}},"loc":{"start":{"line":92,"column":23},"end":{"line":108,"column":5}},"line":92},"11":{"name":"(anonymous_11)","decl":{"start":{"line":109,"column":4},"end":{"line":109,"column":5}},"loc":{"start":{"line":109,"column":42},"end":{"line":147,"column":5}},"line":109},"12":{"name":"(anonymous_12)","decl":{"start":{"line":148,"column":4},"end":{"line":148,"column":5}},"loc":{"start":{"line":148,"column":27},"end":{"line":156,"column":5}},"line":148},"13":{"name":"(anonymous_13)","decl":{"start":{"line":157,"column":4},"end":{"line":157,"column":5}},"loc":{"start":{"line":157,"column":43},"end":{"line":165,"column":5}},"line":157},"14":{"name":"(anonymous_14)","decl":{"start":{"line":166,"column":4},"end":{"line":166,"column":5}},"loc":{"start":{"line":166,"column":42},"end":{"line":175,"column":5}},"line":166},"15":{"name":"(anonymous_15)","decl":{"start":{"line":176,"column":4},"end":{"line":176,"column":5}},"loc":{"start":{"line":176,"column":42},"end":{"line":183,"column":5}},"line":176}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":8,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":8,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":5,"column":1}},{"start":{"line":5,"column":6},"end":{"line":8,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},{"start":{"line":6,"column":4},"end":{"line":6,"column":33}}],"line":6},"4":{"loc":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"type":"binary-expr","locations":[{"start":{"line":9,"column":26},"end":{"line":9,"column":30}},{"start":{"line":9,"column":34},"end":{"line":9,"column":57}},{"start":{"line":9,"column":63},"end":{"line":13,"column":1}}],"line":9},"5":{"loc":{"start":{"line":9,"column":63},"end":{"line":13,"column":1}},"type":"cond-expr","locations":[{"start":{"line":9,"column":80},"end":{"line":11,"column":1}},{"start":{"line":11,"column":5},"end":{"line":13,"column":1}}],"line":9},"6":{"loc":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"type":"binary-expr","locations":[{"start":{"line":14,"column":20},"end":{"line":14,"column":24}},{"start":{"line":14,"column":28},"end":{"line":14,"column":45}},{"start":{"line":14,"column":50},"end":{"line":20,"column":1}}],"line":14},"7":{"loc":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},{"start":{"line":15,"column":4},"end":{"line":15,"column":42}}],"line":15},"8":{"loc":{"start":{"line":15,"column":8},"end":{"line":15,"column":29}},"type":"binary-expr","locations":[{"start":{"line":15,"column":8},"end":{"line":15,"column":11}},{"start":{"line":15,"column":15},"end":{"line":15,"column":29}}],"line":15},"9":{"loc":{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},{"start":{"line":17,"column":4},"end":{"line":17,"column":141}}],"line":17},"10":{"loc":{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},"type":"if","locations":[{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},{"start":{"line":17,"column":40},"end":{"line":17,"column":141}}],"line":17},"11":{"loc":{"start":{"line":17,"column":44},"end":{"line":17,"column":107}},"type":"binary-expr","locations":[{"start":{"line":17,"column":44},"end":{"line":17,"column":59}},{"start":{"line":17,"column":63},"end":{"line":17,"column":107}}],"line":17},"12":{"loc":{"start":{"line":30,"column":8},"end":{"line":31,"column":60}},"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":31,"column":60}},{"start":{"line":30,"column":8},"end":{"line":31,"column":60}}],"line":30},"13":{"loc":{"start":{"line":33,"column":19},"end":{"line":33,"column":57}},"type":"binary-expr","locations":[{"start":{"line":33,"column":19},"end":{"line":33,"column":30}},{"start":{"line":33,"column":34},"end":{"line":33,"column":57}}],"line":33},"14":{"loc":{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":50,"column":9}}],"line":48},"15":{"loc":{"start":{"line":55,"column":33},"end":{"line":55,"column":73}},"type":"binary-expr","locations":[{"start":{"line":55,"column":33},"end":{"line":55,"column":43}},{"start":{"line":55,"column":47},"end":{"line":55,"column":73}}],"line":55},"16":{"loc":{"start":{"line":64,"column":8},"end":{"line":67,"column":9}},"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":67,"column":9}},{"start":{"line":64,"column":8},"end":{"line":67,"column":9}}],"line":64},"17":{"loc":{"start":{"line":73,"column":51},"end":{"line":73,"column":68}},"type":"binary-expr","locations":[{"start":{"line":73,"column":51},"end":{"line":73,"column":62}},{"start":{"line":73,"column":66},"end":{"line":73,"column":68}}],"line":73},"18":{"loc":{"start":{"line":88,"column":21},"end":{"line":88,"column":81}},"type":"cond-expr","locations":[{"start":{"line":88,"column":35},"end":{"line":88,"column":66}},{"start":{"line":88,"column":69},"end":{"line":88,"column":81}}],"line":88},"19":{"loc":{"start":{"line":102,"column":8},"end":{"line":106,"column":9}},"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":106,"column":9}},{"start":{"line":102,"column":8},"end":{"line":106,"column":9}}],"line":102},"20":{"loc":{"start":{"line":115,"column":8},"end":{"line":119,"column":9}},"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":119,"column":9}},{"start":{"line":115,"column":8},"end":{"line":119,"column":9}}],"line":115},"21":{"loc":{"start":{"line":123,"column":8},"end":{"line":124,"column":19}},"type":"if","locations":[{"start":{"line":123,"column":8},"end":{"line":124,"column":19}},{"start":{"line":123,"column":8},"end":{"line":124,"column":19}}],"line":123},"22":{"loc":{"start":{"line":144,"column":8},"end":{"line":145,"column":19}},"type":"if","locations":[{"start":{"line":144,"column":8},"end":{"line":145,"column":19}},{"start":{"line":144,"column":8},"end":{"line":145,"column":19}}],"line":144}},"s":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":1,"12":1,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":2,"29":1,"30":1,"31":1,"32":1,"33":1,"34":59,"35":59,"36":59,"37":59,"38":83,"39":83,"40":83,"41":83,"42":26,"43":26,"44":57,"45":57,"46":57,"47":99,"48":99,"49":99,"50":99,"51":105,"52":105,"53":57,"54":57,"55":61,"56":61,"57":61,"58":61,"59":61,"60":61,"61":61,"62":79,"63":79,"64":79,"65":79,"66":79,"67":79,"68":79,"69":79,"70":79,"71":79,"72":1,"73":1,"74":1,"75":78,"76":4,"77":4,"78":4,"79":4,"80":4,"81":1,"82":1,"83":1,"84":3,"85":3,"86":0,"87":3,"88":3,"89":3,"90":3,"91":3,"92":3,"93":3,"94":3,"95":3,"96":3,"97":4,"98":4,"99":4,"100":4,"101":3,"102":3,"103":1,"104":2,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":1,"6":2,"7":59,"8":83,"9":61,"10":79,"11":4,"12":1,"13":1,"14":1,"15":1},"b":{"0":[1,1,1],"1":[1,0],"2":[0,0],"3":[0,0],"4":[1,1,1],"5":[1,0],"6":[1,1,1],"7":[1,0],"8":[1,1],"9":[0,0],"10":[0,0],"11":[0,0],"12":[1,1],"13":[1,0],"14":[59],"15":[59,0],"16":[26,57],"17":[99,1],"18":[0,61],"19":[1,78],"20":[1,3],"21":[0,3],"22":[1,2]},"inputSourceMap":{"version":3,"file":"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/dataWriter.ts","sources":["/home/snorr/Documents/code/jaggu/nbs/larvituser/src/dataWriter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Log, LogInstance, Utils } from 'larvitutils';\nimport { Helpers, arrayify } from './helpers';\n\nimport { DbMigration } from 'larvitdbmigration';\nimport * as uuidLib from 'uuid';\n\nconst topLogPrefix = 'larvituser: dataWriter.ts -';\n\nexport type DataWriterOptions = {\n\tlog?: LogInstance,\n\tdb: any,\n};\n\nexport class DataWriter {\n\tprivate lUtils: Utils;\n\tprivate helpers: Helpers;\n\tprivate log: LogInstance;\n\tprivate db: any;\n\n\tconstructor(options: DataWriterOptions) {\n\t\tif (!options.db) throw new Error('Required option \"db\" not set');\n\n\t\tthis.db = options.db;\n\t\tthis.log = options.log ?? new Log();\n\t\tthis.lUtils = new Utils({ log: this.log });\n\t\tthis.helpers = new Helpers({\n\t\t\tdataWriter: this,\n\t\t\tlog: this.log,\n\t\t\tdb: this.db,\n\t\t});\n\t}\n\n\tasync runDbMigrations(scriptPath?: string): Promise<void> {\n\t\t// Change tablename from larvituser_db_version to users_db_version\n\t\t// In case larvituser_db_version exists, that is.\n\t\t// This is due to a breaking change in 0.17.0 and this was added as\n\t\t// a patch in 0.17.1 to make applications not crash\n\t\tconst { rows } = await this.db.query('SHOW TABLES LIKE \\'larvituser_db_version\\'');\n\t\t/* istanbul ignore if */ // Nasty to test\n\t\tif (rows.length) {\n\t\t\tawait this.db.query('RENAME TABLE larvituser_db_version TO users_db_version');\n\t\t}\n\n\t\tconst dbMigration = new DbMigration({\n\t\t\tdbType: 'mariadb',\n\t\t\tdbDriver: this.db,\n\t\t\ttableName: 'users_db_version',\n\t\t\tmigrationScriptPath: scriptPath ?? `${__dirname}/dbmigration`,\n\t\t\tlog: this.log,\n\t\t});\n\n\t\tawait dbMigration.run();\n\t}\n\n\tasync addUserDataFields(userUuid: string, fields: Record<string, string | string[]>)\n\t\t: Promise<void> {\n\t\tconst { helpers, lUtils } = this;\n\t\tconst logPrefix = `${topLogPrefix} addUserDataFields() -`;\n\n\t\tlet sql = 'INSERT INTO user_users_data (userUuid, fieldUuid, data) VALUES';\n\n\t\tif (!Object.keys(fields).length) {\n\t\t\tthis.log.verbose(`${logPrefix} No fields specifed`);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst userUuidBuffer = helpers.valueOrThrow(lUtils.uuidToBuffer(userUuid), logPrefix, 'Invalid userUuid');\n\t\tconst dbValues: Array<string | Buffer> = [];\n\t\tfor (const key in fields) {\n\t\t\tconst fieldUuid = helpers.valueOrThrow(await helpers.getFieldUuid(key), logPrefix, `Failed to get field uuid for: ${key}`);\n\t\t\tconst fieldUuidBuffer = helpers.valueOrThrow(lUtils.uuidToBuffer(fieldUuid), logPrefix, 'Invalid fieldUuid');\n\t\t\tconst values = arrayify(fields[key] ?? '');\n\t\t\tfor (const value of values) {\n\t\t\t\tsql += '(?,?,?),';\n\t\t\t\tdbValues.push(userUuidBuffer, fieldUuidBuffer, value);\n\t\t\t}\n\t\t}\n\n\t\tsql = sql.substring(0, sql.length - 1) + ';';\n\n\t\tawait this.db.query(sql, dbValues);\n\t}\n\n\tasync addUserField(name: string): Promise<void> {\n\t\tconst { lUtils, helpers } = this;\n\t\tconst logPrefix = `${topLogPrefix} addUserField() -`;\n\t\tconst sql = 'INSERT IGNORE INTO user_data_fields (uuid, name) VALUES(?,?)';\n\n\t\t// Check if this is already set in the database\n\t\tconst { rows } = await this.db.query('SELECT uuid FROM user_data_fields WHERE name = ?', [name]);\n\t\tconst uuid = rows.length ? lUtils.formatUuid(rows[0].uuid) : uuidLib.v1();\n\n\t\tconst uuidBuffer = helpers.valueOrThrow(lUtils.uuidToBuffer(uuid as string), logPrefix, 'Invalid field uuid');\n\n\t\tawait this.db.query(sql, [uuidBuffer, name]);\n\t}\n\n\tasync create(user: {\n\t\tuuid: string, username: string, password: string, fields: Record<string, string | string[]>\n\t}): Promise<void> {\n\t\tconst { helpers, lUtils } = this;\n\t\tconst logPrefix = `${topLogPrefix} create() -`;\n\t\tconst dbFields = [];\n\t\tconst sql = 'INSERT IGNORE INTO user_users (uuid, username, password) VALUES(?,?,?);';\n\n\t\tconst uuidBuffer = helpers.valueOrThrow(lUtils.uuidToBuffer(user.uuid), logPrefix, `Invalid user uuid supplied: \"${user.uuid}`);\n\n\t\tdbFields.push(uuidBuffer);\n\t\tdbFields.push(user.username);\n\t\tdbFields.push(user.password);\n\n\t\tconst results = await this.db.query(sql, dbFields);\n\n\t\tif (results.rows.affectedRows === 0) {\n\t\t\tconst err = new Error('No user created, duplicate key on uuid: \"' + user.uuid + '\" or username: \"' + user.username + '\"');\n\t\t\tthis.log.warn(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\tawait this.addUserDataFields(user.uuid, user.fields);\n\t}\n\n\tasync replaceFields(userUuid: string, fields: Record<string, string | string[]> | null)\n\t\t: Promise<void> {\n\t\tconst { helpers, lUtils } = this;\n\t\tconst logPrefix = `${topLogPrefix} replaceFields() -`;\n\n\t\tconst userUuidBuf = helpers.valueOrThrow(lUtils.uuidToBuffer(userUuid), logPrefix, `Invalid user uuid supplied: \"${userUuid}`);\n\n\t\t// Check so the user uuid is valid\n\t\tconst { rows } = await this.db.query('SELECT * FROM user_users WHERE uuid = ?', userUuidBuf);\n\t\tif (!rows.length) {\n\t\t\tconst err = new Error(`Invalid user uuid: \"${userUuid}\", no records found in database of this user`);\n\t\t\tthis.log.warn(`${logPrefix} ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\n\t\t// Clean out previous data\n\t\tawait this.db.query('DELETE FROM user_users_data WHERE userUuid = ?', [userUuidBuf]);\n\n\t\t// Get field uuids\n\t\tif (!fields) return;\n\n\t\tconst fieldNamesToUuidBufs: Record<string, Buffer> = {};\n\t\tfor (const fieldName of Object.keys(fields)) {\n\t\t\tconst fieldUuid = helpers.valueOrThrow(await helpers.getFieldUuid(fieldName), logPrefix, `Invalid field uuid for field: ${fieldName}`);\n\t\t\tconst asBuffer = helpers.valueOrThrow(lUtils.uuidToBuffer(fieldUuid), logPrefix, `Failed to convert field uuid to buffer, uuid: ${fieldUuid}`);\n\n\t\t\tfieldNamesToUuidBufs[fieldName] = asBuffer;\n\t\t}\n\n\t\t// Add new data\n\t\tconst dbFields = [];\n\t\tlet sql = 'INSERT INTO user_users_data (userUuid, fieldUuid, data) VALUES';\n\n\t\tfor (const fieldName of Object.keys(fields)) {\n\t\t\tconst fieldValues = arrayify(fields[fieldName]);\n\n\t\t\tfor (const fieldValue of fieldValues) {\n\t\t\t\tsql += '(?,?,?),';\n\t\t\t\tdbFields.push(userUuidBuf);\n\t\t\t\tdbFields.push(fieldNamesToUuidBufs[fieldName]);\n\t\t\t\tdbFields.push(fieldValue);\n\t\t\t}\n\t\t}\n\n\t\tsql = sql.substring(0, sql.length - 1) + ';';\n\n\t\tif (!dbFields.length) return;\n\n\t\tawait this.db.query(sql, dbFields);\n\t}\n\n\tasync rmUser(userUuid: string): Promise<void> {\n\t\tconst { helpers, lUtils } = this;\n\t\tconst logPrefix = `${topLogPrefix} rmUser() -`;\n\n\t\tconst uuidBuffer = helpers.valueOrThrow(lUtils.uuidToBuffer(userUuid), logPrefix, 'Invalid user uuid');\n\n\t\tlet sql = 'DELETE FROM user_users_data WHERE userUuid = ?;';\n\t\tawait this.db.query(sql, [uuidBuffer]);\n\n\t\tsql = 'DELETE FROM user_users WHERE uuid = ?;';\n\t\tawait this.db.query(sql, [uuidBuffer]);\n\t}\n\n\tasync rmUserField(userUuid: string, fieldName: string): Promise<void> {\n\t\tconst { helpers, lUtils } = this;\n\t\tconst logPrefix = `${topLogPrefix} rmUserField() -`;\n\n\t\tconst userUuidBuffer = helpers.valueOrThrow(lUtils.uuidToBuffer(userUuid), logPrefix, 'Invalid user uuid');\n\t\tconst fieldUuid = helpers.valueOrThrow(await helpers.getFieldUuid(fieldName), logPrefix, `Could not get field uuid for field: ${fieldName}`);\n\t\tconst fieldUuidBuffer = helpers.valueOrThrow(lUtils.uuidToBuffer(fieldUuid), logPrefix, 'Invalid field uuid');\n\n\t\tconst sql = 'DELETE FROM user_users_data WHERE userUuid = ? AND fieldUuid = ?';\n\t\tawait this.db.query(sql, [userUuidBuffer, fieldUuidBuffer]);\n\t}\n\n\tasync setPassword(userUuid: string, password: string): Promise<void> {\n\t\tconst { helpers, lUtils } = this;\n\t\tconst logPrefix = `${topLogPrefix} setPassword() -`;\n\n\t\tconst userUuidBuffer = helpers.valueOrThrow(lUtils.uuidToBuffer(userUuid), logPrefix, 'Invalid user uuid');\n\n\t\tconst dbFields: Array<string | Buffer> = [];\n\t\tdbFields.push(password);\n\t\tdbFields.push(userUuidBuffer);\n\n\t\tconst sql = 'UPDATE user_users SET password = ? WHERE uuid = ?;';\n\t\tawait this.db.query(sql, dbFields);\n\t}\n\n\tasync setUsername(userUuid: string, username: string): Promise<void> {\n\t\tconst { helpers, lUtils } = this;\n\t\tconst logPrefix = `${topLogPrefix} setUsername() -`;\n\n\t\tconst userUuidBuffer = helpers.valueOrThrow(lUtils.uuidToBuffer(userUuid), logPrefix, 'Invalid user uuid');\n\n\t\tconst sql = 'UPDATE user_users SET username = ? WHERE uuid = ?;';\n\t\tconst dbFields = [username, userUuidBuffer];\n\t\tawait this.db.query(sql, dbFields);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"21accd66baa7b9cbcbc00dd93ba3204132e191fb","contentHash":"26add97a7e0440517e26e7cb0a82b36d3931ca6ff76788c09b7dd462eeb85e5c"},"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/users.ts":{"path":"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/users.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":4,"column":22},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":18},"end":{"line":5,"column":38}},"4":{"start":{"line":6,"column":21},"end":{"line":6,"column":43}},"5":{"start":{"line":9,"column":8},"end":{"line":10,"column":63}},"6":{"start":{"line":10,"column":12},"end":{"line":10,"column":63}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":58}},"8":{"start":{"line":12,"column":8},"end":{"line":12,"column":65}},"9":{"start":{"line":13,"column":8},"end":{"line":13,"column":31}},"10":{"start":{"line":22,"column":23},"end":{"line":22,"column":35}},"11":{"start":{"line":23,"column":20},"end":{"line":23,"column":150}},"12":{"start":{"line":24,"column":25},"end":{"line":24,"column":44}},"13":{"start":{"line":25,"column":8},"end":{"line":25,"column":39}},"14":{"start":{"line":25,"column":31},"end":{"line":25,"column":37}},"15":{"start":{"line":29,"column":41},"end":{"line":29,"column":45}},"16":{"start":{"line":30,"column":23},"end":{"line":30,"column":30}},"17":{"start":{"line":31,"column":26},"end":{"line":31,"column":51}},"18":{"start":{"line":32,"column":25},"end":{"line":32,"column":27}},"19":{"start":{"line":33,"column":23},"end":{"line":33,"column":25}},"20":{"start":{"line":35,"column":8},"end":{"line":44,"column":9}},"21":{"start":{"line":36,"column":12},"end":{"line":36,"column":42}},"22":{"start":{"line":37,"column":12},"end":{"line":37,"column":95}},"23":{"start":{"line":38,"column":12},"end":{"line":38,"column":68}},"24":{"start":{"line":39,"column":12},"end":{"line":42,"column":13}},"25":{"start":{"line":40,"column":16},"end":{"line":40,"column":43}},"26":{"start":{"line":41,"column":16},"end":{"line":41,"column":51}},"27":{"start":{"line":43,"column":12},"end":{"line":43,"column":75}},"28":{"start":{"line":45,"column":8},"end":{"line":52,"column":9}},"29":{"start":{"line":46,"column":12},"end":{"line":51,"column":13}},"30":{"start":{"line":47,"column":16},"end":{"line":48,"column":93}},"31":{"start":{"line":49,"column":16},"end":{"line":49,"column":61}},"32":{"start":{"line":50,"column":16},"end":{"line":50,"column":37}},"33":{"start":{"line":53,"column":8},"end":{"line":60,"column":9}},"34":{"start":{"line":54,"column":12},"end":{"line":59,"column":13}},"35":{"start":{"line":55,"column":16},"end":{"line":56,"column":93}},"36":{"start":{"line":57,"column":16},"end":{"line":57,"column":74}},"37":{"start":{"line":58,"column":16},"end":{"line":58,"column":37}},"38":{"start":{"line":61,"column":8},"end":{"line":68,"column":9}},"39":{"start":{"line":62,"column":12},"end":{"line":62,"column":35}},"40":{"start":{"line":63,"column":12},"end":{"line":63,"column":96}},"41":{"start":{"line":64,"column":12},"end":{"line":64,"column":50}},"42":{"start":{"line":65,"column":12},"end":{"line":65,"column":30}},"43":{"start":{"line":66,"column":12},"end":{"line":66,"column":49}},"44":{"start":{"line":67,"column":12},"end":{"line":67,"column":49}},"45":{"start":{"line":69,"column":8},"end":{"line":91,"column":9}},"46":{"start":{"line":70,"column":26},"end":{"line":78,"column":14}},"47":{"start":{"line":72,"column":35},"end":{"line":72,"column":60}},"48":{"start":{"line":73,"column":16},"end":{"line":76,"column":17}},"49":{"start":{"line":74,"column":20},"end":{"line":74,"column":84}},"50":{"start":{"line":75,"column":20},"end":{"line":75,"column":33}},"51":{"start":{"line":77,"column":16},"end":{"line":77,"column":28}},"52":{"start":{"line":79,"column":12},"end":{"line":90,"column":13}},"53":{"start":{"line":80,"column":16},"end":{"line":80,"column":43}},"54":{"start":{"line":83,"column":16},"end":{"line":83,"column":45}},"55":{"start":{"line":84,"column":16},"end":{"line":88,"column":17}},"56":{"start":{"line":85,"column":39},"end":{"line":85,"column":64}},"57":{"start":{"line":86,"column":20},"end":{"line":86,"column":37}},"58":{"start":{"line":87,"column":20},"end":{"line":87,"column":46}},"59":{"start":{"line":89,"column":16},"end":{"line":89,"column":78}},"60":{"start":{"line":92,"column":22},"end":{"line":92,"column":46}},"61":{"start":{"line":93,"column":29},"end":{"line":93,"column":46}},"62":{"start":{"line":94,"column":29},"end":{"line":94,"column":109}},"63":{"start":{"line":95,"column":18},"end":{"line":95,"column":83}},"64":{"start":{"line":97,"column":8},"end":{"line":125,"column":9}},"65":{"start":{"line":98,"column":37},"end":{"line":98,"column":80}},"66":{"start":{"line":99,"column":12},"end":{"line":121,"column":13}},"67":{"start":{"line":100,"column":16},"end":{"line":108,"column":17}},"68":{"start":{"line":101,"column":20},"end":{"line":101,"column":127}},"69":{"start":{"line":102,"column":20},"end":{"line":102,"column":187}},"70":{"start":{"line":103,"column":20},"end":{"line":103,"column":38}},"71":{"start":{"line":104,"column":20},"end":{"line":104,"column":59}},"72":{"start":{"line":107,"column":20},"end":{"line":107,"column":55}},"73":{"start":{"line":109,"column":16},"end":{"line":109,"column":32}},"74":{"start":{"line":110,"column":16},"end":{"line":110,"column":40}},"75":{"start":{"line":111,"column":16},"end":{"line":111,"column":71}},"76":{"start":{"line":112,"column":16},"end":{"line":117,"column":17}},"77":{"start":{"line":113,"column":20},"end":{"line":113,"column":34}},"78":{"start":{"line":116,"column":20},"end":{"line":116,"column":35}},"79":{"start":{"line":120,"column":16},"end":{"line":120,"column":98}},"80":{"start":{"line":124,"column":12},"end":{"line":124,"column":58}},"81":{"start":{"line":126,"column":8},"end":{"line":131,"column":9}},"82":{"start":{"line":127,"column":12},"end":{"line":127,"column":55}},"83":{"start":{"line":128,"column":12},"end":{"line":130,"column":13}},"84":{"start":{"line":129,"column":16},"end":{"line":129,"column":61}},"85":{"start":{"line":132,"column":25},"end":{"line":132,"column":61}},"86":{"start":{"line":133,"column":8},"end":{"line":133,"column":24}},"87":{"start":{"line":134,"column":22},"end":{"line":134,"column":24}},"88":{"start":{"line":135,"column":8},"end":{"line":142,"column":9}},"89":{"start":{"line":136,"column":25},"end":{"line":140,"column":13}},"90":{"start":{"line":141,"column":12},"end":{"line":141,"column":29}},"91":{"start":{"line":144,"column":8},"end":{"line":177,"column":9}},"92":{"start":{"line":145,"column":12},"end":{"line":176,"column":13}},"93":{"start":{"line":146,"column":35},"end":{"line":146,"column":65}},"94":{"start":{"line":149,"column":16},"end":{"line":152,"column":17}},"95":{"start":{"line":153,"column":34},"end":{"line":153,"column":36}},"96":{"start":{"line":154,"column":26},"end":{"line":161,"column":40}},"97":{"start":{"line":162,"column":16},"end":{"line":165,"column":17}},"98":{"start":{"line":163,"column":20},"end":{"line":163,"column":32}},"99":{"start":{"line":164,"column":20},"end":{"line":164,"column":39}},"100":{"start":{"line":166,"column":16},"end":{"line":166,"column":55}},"101":{"start":{"line":167,"column":16},"end":{"line":167,"column":47}},"102":{"start":{"line":168,"column":16},"end":{"line":168,"column":43}},"103":{"start":{"line":169,"column":33},"end":{"line":169,"column":63}},"104":{"start":{"line":170,"column":16},"end":{"line":175,"column":17}},"105":{"start":{"line":171,"column":20},"end":{"line":172,"column":33}},"106":{"start":{"line":172,"column":24},"end":{"line":172,"column":33}},"107":{"start":{"line":173,"column":20},"end":{"line":173,"column":76}},"108":{"start":{"line":174,"column":20},"end":{"line":174,"column":67}},"109":{"start":{"line":179,"column":33},"end":{"line":179,"column":103}},"110":{"start":{"line":180,"column":44},"end":{"line":180,"column":86}},"111":{"start":{"line":181,"column":30},"end":{"line":181,"column":64}},"112":{"start":{"line":182,"column":8},"end":{"line":182,"column":40}},"113":{"start":{"line":185,"column":0},"end":{"line":185,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":25},"end":{"line":14,"column":5}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":34},"end":{"line":26,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":24},"end":{"line":25,"column":25}},"loc":{"start":{"line":25,"column":31},"end":{"line":25,"column":37}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":16},"end":{"line":183,"column":5}},"line":27},"4":{"name":"(anonymous_4)","decl":{"start":{"line":71,"column":24},"end":{"line":71,"column":25}},"loc":{"start":{"line":71,"column":32},"end":{"line":78,"column":13}},"line":71}},"branchMap":{"0":{"loc":{"start":{"line":9,"column":8},"end":{"line":10,"column":63}},"type":"if","locations":[{"start":{"line":9,"column":8},"end":{"line":10,"column":63}},{"start":{"line":9,"column":8},"end":{"line":10,"column":63}}],"line":9},"1":{"loc":{"start":{"line":11,"column":19},"end":{"line":11,"column":57}},"type":"binary-expr","locations":[{"start":{"line":11,"column":19},"end":{"line":11,"column":30}},{"start":{"line":11,"column":34},"end":{"line":11,"column":57}}],"line":11},"2":{"loc":{"start":{"line":35,"column":8},"end":{"line":44,"column":9}},"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":44,"column":9}},{"start":{"line":35,"column":8},"end":{"line":44,"column":9}}],"line":35},"3":{"loc":{"start":{"line":35,"column":12},"end":{"line":35,"column":77}},"type":"binary-expr","locations":[{"start":{"line":35,"column":12},"end":{"line":35,"column":39}},{"start":{"line":35,"column":43},"end":{"line":35,"column":77}}],"line":35},"4":{"loc":{"start":{"line":45,"column":8},"end":{"line":52,"column":9}},"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":52,"column":9}},{"start":{"line":45,"column":8},"end":{"line":52,"column":9}}],"line":45},"5":{"loc":{"start":{"line":45,"column":12},"end":{"line":45,"column":80}},"type":"binary-expr","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":34}},{"start":{"line":45,"column":38},"end":{"line":45,"column":80}}],"line":45},"6":{"loc":{"start":{"line":53,"column":8},"end":{"line":60,"column":9}},"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":60,"column":9}},{"start":{"line":53,"column":8},"end":{"line":60,"column":9}}],"line":53},"7":{"loc":{"start":{"line":53,"column":12},"end":{"line":53,"column":82}},"type":"binary-expr","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":35}},{"start":{"line":53,"column":39},"end":{"line":53,"column":82}}],"line":53},"8":{"loc":{"start":{"line":61,"column":8},"end":{"line":68,"column":9}},"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":68,"column":9}},{"start":{"line":61,"column":8},"end":{"line":68,"column":9}}],"line":61},"9":{"loc":{"start":{"line":69,"column":8},"end":{"line":91,"column":9}},"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":91,"column":9}},{"start":{"line":69,"column":8},"end":{"line":91,"column":9}}],"line":69},"10":{"loc":{"start":{"line":73,"column":16},"end":{"line":76,"column":17}},"type":"if","locations":[{"start":{"line":73,"column":16},"end":{"line":76,"column":17}},{"start":{"line":73,"column":16},"end":{"line":76,"column":17}}],"line":73},"11":{"loc":{"start":{"line":79,"column":12},"end":{"line":90,"column":13}},"type":"if","locations":[{"start":{"line":79,"column":12},"end":{"line":90,"column":13}},{"start":{"line":79,"column":12},"end":{"line":90,"column":13}}],"line":79},"12":{"loc":{"start":{"line":94,"column":29},"end":{"line":94,"column":109}},"type":"cond-expr","locations":[{"start":{"line":94,"column":52},"end":{"line":94,"column":97}},{"start":{"line":94,"column":100},"end":{"line":94,"column":109}}],"line":94},"13":{"loc":{"start":{"line":97,"column":8},"end":{"line":125,"column":9}},"type":"if","locations":[{"start":{"line":97,"column":8},"end":{"line":125,"column":9}},{"start":{"line":97,"column":8},"end":{"line":125,"column":9}}],"line":97},"14":{"loc":{"start":{"line":97,"column":12},"end":{"line":97,"column":76}},"type":"binary-expr","locations":[{"start":{"line":97,"column":12},"end":{"line":97,"column":39}},{"start":{"line":97,"column":43},"end":{"line":97,"column":76}}],"line":97},"15":{"loc":{"start":{"line":98,"column":61},"end":{"line":98,"column":79}},"type":"binary-expr","locations":[{"start":{"line":98,"column":61},"end":{"line":98,"column":73}},{"start":{"line":98,"column":77},"end":{"line":98,"column":79}}],"line":98},"16":{"loc":{"start":{"line":99,"column":12},"end":{"line":121,"column":13}},"type":"if","locations":[{"start":{"line":99,"column":12},"end":{"line":121,"column":13}},{"start":{"line":99,"column":12},"end":{"line":121,"column":13}}],"line":99},"17":{"loc":{"start":{"line":99,"column":16},"end":{"line":99,"column":93}},"type":"binary-expr","locations":[{"start":{"line":99,"column":16},"end":{"line":99,"column":46}},{"start":{"line":99,"column":50},"end":{"line":99,"column":93}}],"line":99},"18":{"loc":{"start":{"line":100,"column":16},"end":{"line":108,"column":17}},"type":"if","locations":[{"start":{"line":100,"column":16},"end":{"line":108,"column":17}},{"start":{"line":100,"column":16},"end":{"line":108,"column":17}}],"line":100},"19":{"loc":{"start":{"line":100,"column":20},"end":{"line":100,"column":82}},"type":"binary-expr","locations":[{"start":{"line":100,"column":20},"end":{"line":100,"column":47}},{"start":{"line":100,"column":51},"end":{"line":100,"column":82}}],"line":100},"20":{"loc":{"start":{"line":112,"column":16},"end":{"line":117,"column":17}},"type":"if","locations":[{"start":{"line":112,"column":16},"end":{"line":117,"column":17}},{"start":{"line":112,"column":16},"end":{"line":117,"column":17}}],"line":112},"21":{"loc":{"start":{"line":126,"column":8},"end":{"line":131,"column":9}},"type":"if","locations":[{"start":{"line":126,"column":8},"end":{"line":131,"column":9}},{"start":{"line":126,"column":8},"end":{"line":131,"column":9}}],"line":126},"22":{"loc":{"start":{"line":126,"column":12},"end":{"line":126,"column":60}},"type":"binary-expr","locations":[{"start":{"line":126,"column":12},"end":{"line":126,"column":25}},{"start":{"line":126,"column":29},"end":{"line":126,"column":60}}],"line":126},"23":{"loc":{"start":{"line":128,"column":12},"end":{"line":130,"column":13}},"type":"if","locations":[{"start":{"line":128,"column":12},"end":{"line":130,"column":13}},{"start":{"line":128,"column":12},"end":{"line":130,"column":13}}],"line":128},"24":{"loc":{"start":{"line":128,"column":16},"end":{"line":128,"column":66}},"type":"binary-expr","locations":[{"start":{"line":128,"column":16},"end":{"line":128,"column":30}},{"start":{"line":128,"column":34},"end":{"line":128,"column":66}}],"line":128},"25":{"loc":{"start":{"line":144,"column":8},"end":{"line":177,"column":9}},"type":"if","locations":[{"start":{"line":144,"column":8},"end":{"line":177,"column":9}},{"start":{"line":144,"column":8},"end":{"line":177,"column":9}}],"line":144},"26":{"loc":{"start":{"line":144,"column":12},"end":{"line":144,"column":51}},"type":"binary-expr","locations":[{"start":{"line":144,"column":12},"end":{"line":144,"column":24}},{"start":{"line":144,"column":28},"end":{"line":144,"column":51}}],"line":144},"27":{"loc":{"start":{"line":149,"column":16},"end":{"line":152,"column":17}},"type":"if","locations":[{"start":{"line":149,"column":16},"end":{"line":152,"column":17}}],"line":149},"28":{"loc":{"start":{"line":171,"column":20},"end":{"line":172,"column":33}},"type":"if","locations":[{"start":{"line":171,"column":20},"end":{"line":172,"column":33}},{"start":{"line":171,"column":20},"end":{"line":172,"column":33}}],"line":171},"29":{"loc":{"start":{"line":173,"column":20},"end":{"line":173,"column":75}},"type":"binary-expr","locations":[{"start":{"line":173,"column":20},"end":{"line":173,"column":58}},{"start":{"line":173,"column":63},"end":{"line":173,"column":74}}],"line":173}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":18,"6":0,"7":18,"8":18,"9":18,"10":1,"11":1,"12":1,"13":1,"14":3,"15":17,"16":17,"17":17,"18":17,"19":17,"20":17,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":17,"29":1,"30":1,"31":1,"32":1,"33":17,"34":2,"35":3,"36":3,"37":3,"38":17,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":17,"46":2,"47":4,"48":4,"49":2,"50":2,"51":2,"52":2,"53":1,"54":1,"55":1,"56":2,"57":2,"58":2,"59":1,"60":17,"61":17,"62":17,"63":17,"64":17,"65":7,"66":7,"67":6,"68":4,"69":4,"70":4,"71":4,"72":2,"73":6,"74":6,"75":6,"76":6,"77":3,"78":3,"79":1,"80":10,"81":16,"82":1,"83":1,"84":1,"85":16,"86":16,"87":16,"88":16,"89":38,"90":38,"91":16,"92":5,"93":15,"94":15,"95":15,"96":15,"97":15,"98":15,"99":15,"100":15,"101":15,"102":15,"103":15,"104":15,"105":21,"106":0,"107":21,"108":21,"109":16,"110":16,"111":16,"112":16,"113":1},"f":{"0":18,"1":1,"2":3,"3":17,"4":4},"b":{"0":[0,18],"1":[18,0],"2":[1,16],"3":[17,1],"4":[1,16],"5":[17,1],"6":[2,15],"7":[17,2],"8":[1,16],"9":[2,15],"10":[2,2],"11":[1,1],"12":[6,11],"13":[7,10],"14":[17,7],"15":[7,2],"16":[6,1],"17":[7,7],"18":[4,2],"19":[6,6],"20":[3,3],"21":[1,15],"22":[16,1],"23":[1,0],"24":[1,1],"25":[5,11],"26":[16,5],"27":[15],"28":[0,21],"29":[21,15]},"inputSourceMap":{"version":3,"file":"/home/snorr/Documents/code/jaggu/nbs/larvituser/src/users.ts","sources":["/home/snorr/Documents/code/jaggu/nbs/larvituser/src/users.ts"],"names":[],"mappings":"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","sourcesContent":["import { Log, LogInstance, Utils } from 'larvitutils';\nimport { arrayify } from './helpers';\n\nconst topLogPrefix = 'larvituser: users.ts';\n\nexport type UsersOptions = {\n\tdb: any,\n\tlimit?: string,\n\tlog?: LogInstance,\n\tmatchAllFields?: Record<string, string | Array<string>>,\n\tmatchAllFieldsQ?: Record<string, string | Array<string>>,\n\tmatchExistingFields?: string[],\n\toffset?: string,\n\torder?: {\n\t\tby?: string,\n\t\tdirection?: 'asc' | 'desc',\n\t},\n\tq?: string,\n\treturnFields?: string[],\n\tuuids?: string | string[],\n};\n\nexport type UserFields = {\n\t[key: string]: string[]\n};\n\nexport type UserModel = {\n\tuuid: string,\n\tusername: string,\n\tfields: UserFields,\n};\n\nexport class Users {\n\tprivate log: LogInstance;\n\tprivate lUtils: Utils;\n\tprivate options: Omit<UsersOptions, 'log'>;\n\n\tconstructor(options: UsersOptions) {\n\t\tif (!options.db) throw new Error('Required option \"db\" is missing');\n\n\t\tthis.log = options.log ?? new Log();\n\t\tthis.lUtils = new Utils({ log: this.log });\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Gets distinct data values from speciefied field for all users\n\t *\n\t * @param {string} fieldName - the name of the field\n\t * @returns {Array<string>} - an array with values liek ['value1', 'value2']\n\t */\n\tasync getFieldData(fieldName: string): Promise<string[]> {\n\t\tconst { db } = this.options;\n\t\tconst sql = 'SELECT DISTINCT d.data FROM user_users_data d JOIN user_data_fields f ON d.fieldUuid = f.uuid WHERE f.name = \"' + fieldName + '\"';\n\t\tconst { rows } = await db.query(sql);\n\n\t\treturn rows.map((r: any) => r.data);\n\t}\n\n\tasync get(): Promise<{ users: Array<UserModel>, totalElements: number }> {\n\t\tconst { log, options, lUtils } = this;\n\t\tconst { db } = options;\n\t\tconst logPrefix = `${topLogPrefix} get() -`;\n\n\t\tconst dbFields: Array<string | string[] | Buffer> = [];\n\t\tlet sqlWhere = '';\n\n\t\t// Build where-statement\n\t\tif (options.matchExistingFields && options.matchExistingFields.length) {\n\t\t\tsqlWhere += 'AND uuid IN (\\n';\n\t\t\tsqlWhere += 'SELECT DISTINCT userUuid FROM user_users_data WHERE fieldUuid IN (\\n';\n\t\t\tsqlWhere += 'SELECT uuid FROM user_data_fields WHERE\\n';\n\n\t\t\tfor (const matchExsistingField of options.matchExistingFields) {\n\t\t\t\tsqlWhere += 'name = ? OR ';\n\t\t\t\tdbFields.push(matchExsistingField);\n\t\t\t}\n\n\t\t\tsqlWhere = sqlWhere.substring(0, sqlWhere.length - 4) + '))\\n';\n\t\t}\n\n\t\tif (options.matchAllFields && Object.keys(options.matchAllFields).length) {\n\t\t\tfor (const field in options.matchAllFields) {\n\t\t\t\tsqlWhere += 'AND uuid IN (SELECT userUuid FROM user_users_data WHERE data = ?\\n'\n\t\t\t\t\t+ ' AND fieldUuid = (SELECT uuid FROM user_data_fields WHERE name = ?))';\n\t\t\t\tdbFields.push(options.matchAllFields[field]);\n\t\t\t\tdbFields.push(field);\n\t\t\t}\n\t\t}\n\n\t\tif (options.matchAllFieldsQ && Object.keys(options.matchAllFieldsQ).length) {\n\t\t\tfor (const field in options.matchAllFieldsQ) {\n\t\t\t\tsqlWhere += 'AND uuid IN (SELECT userUuid FROM user_users_data WHERE data LIKE ?\\n'\n\t\t\t\t\t+ ' AND fieldUuid = (SELECT uuid FROM user_data_fields WHERE name = ?))';\n\t\t\t\tdbFields.push('%' + options.matchAllFieldsQ[field] + '%');\n\t\t\t\tdbFields.push(field);\n\t\t\t}\n\t\t}\n\n\t\tif (options.q) {\n\t\t\tsqlWhere += ' AND (\\n';\n\t\t\tsqlWhere += '   uuid IN (SELECT userUuid FROM user_users_data WHERE data LIKE ?)\\n';\n\t\t\tsqlWhere += '   OR username LIKE ?\\n';\n\t\t\tsqlWhere += ')\\n';\n\t\t\tdbFields.push('%' + options.q + '%');\n\t\t\tdbFields.push('%' + options.q + '%');\n\t\t}\n\n\t\tif (options.uuids) {\n\t\t\tconst uuids = arrayify(options.uuids)\n\t\t\t\t.filter(uuid => {\n\t\t\t\t\tconst uuidBuffer = lUtils.uuidToBuffer(uuid);\n\t\t\t\t\tif (uuidBuffer === false) {\n\t\t\t\t\t\tlog.warn(`${logPrefix} Invalid field uuid \"${uuid}\", skipping`);\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\n\t\t\tif (!uuids.length) {\n\t\t\t\tsqlWhere += ' AND 1 = 2\\n';\n\t\t\t} else {\n\t\t\t\tsqlWhere += ' AND uuid IN (';\n\n\t\t\t\tfor (const uuid of uuids) {\n\t\t\t\t\tconst uuidBuffer = lUtils.uuidToBuffer(uuid);\n\n\t\t\t\t\tsqlWhere += '?,';\n\t\t\t\t\tdbFields.push(uuidBuffer as Buffer);\n\t\t\t\t}\n\n\t\t\t\tsqlWhere = sqlWhere.substring(0, sqlWhere.length - 1) + ')\\n';\n\t\t\t}\n\t\t}\n\n\t\tconst dbCon = await db.getConnection();\n\t\tconst mainDbFields = dbFields.slice(0);\n\n\t\tconst returnFields = options.returnFields ? arrayify(options.returnFields) : undefined;\n\n\t\tlet sql = 'SELECT user_users.uuid as uuid, user_users.username as username';\n\n\t\t// SORT ORDERING\n\t\tif (options.order !== undefined && typeof options.order === 'object') {\n\t\t\tconst allowedSortables = ['uuid', 'username', ...returnFields ?? []];\n\n\t\t\tif (options.order.by !== undefined && allowedSortables.includes(options.order.by)) {\n\t\t\t\tif (options.order.by !== 'uuid' && options.order.by !== 'username') {\n\t\t\t\t\tsql += ', group_concat(user_users_data.data) as ' + dbCon.escapeId(options.order.by) + ' FROM user_users ';\n\t\t\t\t\tsql += 'LEFT JOIN user_users_data on (user_users_data.fieldUuid = (SELECT uuid FROM user_data_fields WHERE name = ?) AND user_users_data.userUuid = user_users.uuid) ';\n\t\t\t\t\tsql += 'WHERE 1 ';\n\t\t\t\t\tmainDbFields.unshift(options.order.by);\n\t\t\t\t} else {\n\t\t\t\t\tsql += ' FROM user_users WHERE 1 ';\n\t\t\t\t}\n\n\t\t\t\tsql += sqlWhere;\n\t\t\t\tsql += ' GROUP BY uuid';\n\t\t\t\tsql += ' ORDER BY ' + dbCon.escapeId(options.order.by);\n\n\t\t\t\tif (options.order?.direction?.toUpperCase() !== 'DESC') {\n\t\t\t\t\tsql += ' ASC';\n\t\t\t\t} else {\n\t\t\t\t\tsql += ' DESC';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error('The sorting column did not exist in the \\'returnFields\\' array');\n\t\t\t}\n\t\t} else {\n\t\t\tsql += ' FROM user_users WHERE 1 ' + sqlWhere;\n\t\t}\n\n\t\tif (options.limit && !isNaN(parseInt(options.limit))) {\n\t\t\tsql += ' LIMIT ' + parseInt(options.limit);\n\n\t\t\tif (options.offset && !isNaN(parseInt(options.offset))) {\n\t\t\t\tsql += ' OFFSET ' + parseInt(options.offset);\n\t\t\t}\n\t\t}\n\n\t\tconst { rows } = await dbCon.query(sql, mainDbFields);\n\t\tdbCon.release();\n\n\t\tconst users: Array<UserModel> = [];\n\n\t\tfor (const row of rows) {\n\t\t\tconst user: UserModel = {\n\t\t\t\tuuid: String(lUtils.formatUuid(row.uuid)),\n\t\t\t\tusername: row.username,\n\t\t\t\tfields: {},\n\t\t\t};\n\n\t\t\tusers.push(user);\n\t\t}\n\n\t\t// Fetch field data for users, if requested\n\t\tif (returnFields && returnFields.length > 0) {\n\t\t\tfor (const user of users) {\n\t\t\t\tconst uuidBuffer = lUtils.uuidToBuffer(user.uuid as string);\n\t\t\t\t// Non-tivial to test\n\t\t\t\t/* istanbul ignore if */\n\t\t\t\tif (uuidBuffer === false) {\n\t\t\t\t\tlog.warn(`${logPrefix} Invalid user uuid: \"${user.uuid}\", skipping`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst subFields = [];\n\t\t\t\tlet sql = 'SELECT uf.uuid AS fieldUuid,\\n' +\n\t\t\t\t\t'uf.name AS fieldName,\\n' +\n\t\t\t\t\t'ud.data AS fieldData,\\n' +\n\t\t\t\t\t'ud.userUuid AS userUuid\\n' +\n\t\t\t\t\t'FROM\\n' +\n\t\t\t\t\t\t'user_data_fields uf\\n' +\n\t\t\t\t\t\t\t'LEFT JOIN user_users_data ud ON ud.fieldUuid = uf.uuid\\n' +\n\t\t\t\t\t\t'WHERE uf.name IN (';\n\n\t\t\t\tfor (const fn of returnFields) {\n\t\t\t\t\tsql += '?,';\n\t\t\t\t\tsubFields.push(fn);\n\t\t\t\t}\n\t\t\t\tsql = sql.substring(0, sql.length - 1);\n\n\t\t\t\tsql += ') AND ud.userUuid = ?';\n\n\t\t\t\tsubFields.push(uuidBuffer);\n\n\t\t\t\tconst { rows } = await db.query(sql, subFields);\n\t\t\t\tfor (const row of rows) {\n\t\t\t\t\tif (!row.fieldUuid) continue;\n\n\t\t\t\t\tuser.fields[row.fieldName] ??= [];\n\t\t\t\t\tuser.fields[row.fieldName].push(row.fieldData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Total number of elements\n\t\tconst totalElementsSql = 'SELECT COUNT(*) AS totalElements FROM user_users WHERE 1 ' + sqlWhere;\n\t\tconst { rows: totalElementsRows } = await db.query(totalElementsSql, dbFields);\n\t\tconst totalElements = totalElementsRows[0].totalElements;\n\n\t\treturn { users, totalElements };\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cc7ee4b7f74d9d07d5d9802ee5385901c7937761","contentHash":"8489818a0abbecb721e4b8aadcbb54675258f51867ceac22dadaf378b7c9088b"},"/home/snorr/Documents/code/jaggu/nbs/larvituser/dbmigration/2.js":{"path":"/home/snorr/Documents/code/jaggu/nbs/larvituser/dbmigration/2.js","statementMap":{"0":{"start":{"line":3,"column":16},"end":{"line":3,"column":31}},"1":{"start":{"line":5,"column":0},"end":{"line":24,"column":2}},"2":{"start":{"line":6,"column":14},"end":{"line":6,"column":21}},"3":{"start":{"line":9,"column":1},"end":{"line":9,"column":88}},"4":{"start":{"line":11,"column":16},"end":{"line":11,"column":71}},"5":{"start":{"line":12,"column":1},"end":{"line":14,"column":2}},"6":{"start":{"line":13,"column":2},"end":{"line":13,"column":120}},"7":{"start":{"line":16,"column":1},"end":{"line":16,"column":103}},"8":{"start":{"line":17,"column":1},"end":{"line":17,"column":121}},"9":{"start":{"line":18,"column":1},"end":{"line":18,"column":92}},"10":{"start":{"line":19,"column":1},"end":{"line":19,"column":76}},"11":{"start":{"line":20,"column":1},"end":{"line":20,"column":61}},"12":{"start":{"line":21,"column":1},"end":{"line":21,"column":83}},"13":{"start":{"line":22,"column":1},"end":{"line":22,"column":159}},"14":{"start":{"line":23,"column":1},"end":{"line":23,"column":80}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":27},"end":{"line":5,"column":28}},"loc":{"start":{"line":5,"column":44},"end":{"line":24,"column":1}},"line":5}},"branchMap":{},"s":{"0":1,"1":1,"2":59,"3":59,"4":59,"5":59,"6":0,"7":59,"8":59,"9":59,"10":59,"11":59,"12":59,"13":59,"14":59},"f":{"0":59},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"218f4b2dbe6b969bb4f9d54bfa548ce1225d4be1","contentHash":"daadceaae8e8a79608410bf017fcaa43cd4099ce580d7fa234314f142d403e7f"}}