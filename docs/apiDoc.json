{
  "swagger": "2.0",
  "info": {
    "description": "API to handle generic user data. The idea is to have a free and extendible data structure so these users could be used in a wide variety of systems.",
    "version": "1.0.0",
    "title": "User API",
    "contact": {
      "email": "lilleman@larvit.se"
    },
    "license": {
      "name": "ISC",
      "url": "https://www.isc.org/downloads/software-support-policy/isc-license/"
    }
  },
  "basePath": "/",
  "paths": {
    "/user": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Add a new user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User data that should be written to database. Only username is required.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A new user was written to the database",
            "schema": {
              "$ref": "#/definitions/UserOutput"
            }
          },
          "400": {
            "description": "Invalid body"
          },
          "409": {
            "description": "Conflict, another user with this username already exists"
          }
        }
      }
    },
    "/user/{userUuid}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Add or replace a user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userUuid",
            "in": "path",
            "required": true,
            "description": "The user uuid to write to.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User data that should be written to database. Only username is required.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An existing user was replaced in the database",
            "schema": {
              "$ref": "#/definitions/UserOutput"
            }
          },
          "201": {
            "description": "A new user was written to the database",
            "schema": {
              "$ref": "#/definitions/UserOutput"
            }
          },
          "400": {
            "description": "Invalid body"
          },
          "409": {
            "description": "Conflict, another user with this username already exists"
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user from database",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userUuid",
            "in": "path",
            "required": true,
            "description": "The uuid of the user to retrieve.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User found in database and is returned to the requester",
            "schema": {
              "$ref": "#/definitions/UserOutput"
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a user from database",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userUuid",
            "in": "path",
            "required": true,
            "description": "The uuid of the user to delete.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User found in database and is deleted"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/{userUuid}/field/{fieldName}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Sets a field on a user in the database, replacing any previous data on this field.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userUuid",
            "in": "path",
            "required": true,
            "description": "The uuid of the user to set the field to.",
            "type": "string"
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "description": "The name of the field to set.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Field data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found in database and field is set"
          },
          "400": {
            "description": "Invalid body"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Appends a field on a user in the database.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userUuid",
            "in": "path",
            "required": true,
            "description": "The uuid of the user to append the field to.",
            "type": "string"
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "description": "The name of the field to append.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Field data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found in database and field is set"
          },
          "400": {
            "description": "Invalid body"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a field from a user in the database",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userUuid",
            "in": "path",
            "required": true,
            "description": "The uuid of the user to delete the field from.",
            "type": "string"
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "description": "The name of the field to delete.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User found in database and field is deleted"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/userByUsername/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user from database",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "description": "The username of the user to retrieve.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User found in database and is returned to the requester",
            "schema": {
              "$ref": "#/definitions/UserOutput"
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/userByUsernameAndPassword": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user from database",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Username and password to get user by",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found in database and is returned to the requester",
            "schema": {
              "$ref": "#/definitions/UserOutput"
            }
          },
          "400": {
            "description": "Invalid body"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/userPassword/{userUuid}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Set user password",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userUuid",
            "in": "path",
            "required": true,
            "description": "The user uuid to write to.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New password to be set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password updated"
          },
          "400": {
            "description": "Invalid body"
          }
        }
      }
    },
    "/fields": {
      "get": {
        "tags": [
          "fields"
        ],
        "summary": "Get all fields from database",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Always an array with 0, 1 or many strings in it",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/fieldData/{fieldName}": {
      "get": {
        "tags": [
          "fields"
        ],
        "summary": "Get all fields from database",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "description": "The name of the field to get data for.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Always an array with 0, 1 or many strings in it",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get users from database",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "All parameters is optional\n# Search options\n## uuids\nType: Array of strings or single string\nDescription: Will return any user matching any of the uuids\n## q\nType: String\nDescription: Match any users part of or whole username or part of or whole field data\n## matchExistingFields\nType: Array of strings or single string\nDescription: Will return any user that have fields named like all of the provided ones. For example, ```[role, email]``` will only return users that have both a populated role-field and a populated email-field\n## matchAllFields\nType: Object\nDescription: List of keys and values that must match exactly for users to be returned. For example, ```{role: admin, departments: [norrland, florida]}``` will only return users that have role: admin and departments both norrland and florida. A user having only departments norrland will not be returned.\n# Result modifiers\n## Limit\nType: integer\nDescription: Limits the amount of results to this number of entries\n## Offset\nType: integer\nDescription: How many leading results to ignore\n## returnFields\nType: Array of strings\nDescription: List of field names to return, if they exist, for the users in the result. **If none are provided, no fields are returned** To return many fields is expensive, so keep this to a minimum.\n## orderBy\nType: Object\nDescription: What field(s) to order the result by. Username in this case will be treated as a field. Example:: ```{username: asc, role: desc}```\n",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "uuids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a JSON object with two keys: users and totalMatches. users is always an array with 0, 1 or many users in it, totalMatches is always an integer with the total amount of matches, ignoring offset and limit",
            "schema": {
              "$ref": "#/definitions/UsersOutput"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "UsersOutput": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserOutput"
          }
        },
        "totalMatches": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "UserInput": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "bettan1337"
        },
        "password": {
          "type": "string"
        },
        "fields": {
          "type": "object",
          "properties": {
            "someFieldName": {
              "type": "string",
              "example": "A string that will be converted into the first element of an array of strings"
            },
            "someOtherFieldName": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "UserOutput": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "example": "87e68f87-6ca3-4c70-a1b3-82b68ea0e885"
        },
        "username": {
          "type": "string",
          "example": "bettan1337"
        },
        "fields": {
          "type": "object",
          "properties": {
            "someFieldName": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "someOtherFieldName": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "UserField": {
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  }
}